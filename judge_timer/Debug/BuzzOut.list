
BuzzOut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004714  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080048b4  080048b4  000058b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e4  080049e4  0000624c  2**0
                  CONTENTS
  4 .ARM          00000008  080049e4  080049e4  000059e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049ec  080049ec  0000624c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ec  080049ec  000059ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049f0  080049f0  000059f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  080049f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000024c  08004c40  0000624c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08004c40  000064ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000624c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c87c  00000000  00000000  0000627c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd2  00000000  00000000  00012af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000146d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d7  00000000  00000000  00015368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017276  00000000  00000000  00015d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d962  00000000  00000000  0002cfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9c5  00000000  00000000  0003a917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ccc  00000000  00000000  000ca320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000cdfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000024c 	.word	0x2000024c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800489c 	.word	0x0800489c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000250 	.word	0x20000250
 80001dc:	0800489c 	.word	0x0800489c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Tone>:
// code is 3 for reset + enable output

uint8_t tx_buff[] = {2};
uint8_t rx_buff[1];

static void Tone(uint32_t Frequency) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    TIM2->ARR = (1000000UL / Frequency) - 1; // Set The PWM Frequency
 8000578:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <Tone+0x34>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000580:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000584:	3b01      	subs	r3, #1
 8000586:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CCR1 = (TIM2->ARR >> 1); // Set Duty Cycle 50%
 8000588:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800058c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800058e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000592:	085b      	lsrs	r3, r3, #1
 8000594:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	000f4240 	.word	0x000f4240

080005a8 <Start_PWM>:

void Start_PWM(TIM_HandleTypeDef *htim, uint32_t channel) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 80005b2:	6839      	ldr	r1, [r7, #0]
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f001 ff5f 	bl	8002478 <HAL_TIM_PWM_Start>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <Stop_PWM>:

void Stop_PWM(TIM_HandleTypeDef *htim, uint32_t channel) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Stop(htim, channel);
 80005cc:	6839      	ldr	r1, [r7, #0]
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f002 f802 	bl	80025d8 <HAL_TIM_PWM_Stop>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <playSegment>:
  3, 3, 3, 1, 2, 2, 2, 4, 8, 4
};


// Usage example in your main loop or function
void playSegment(TIM_HandleTypeDef *htim, uint32_t channel, int melody[], int rhythmn[], int length) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]
#define REST(duration) Stop_PWM(htim, channel); HAL_Delay(duration); Start_PWM(htim, channel);
    for (int i = 0; i < length; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e045      	b.n	800067c <playSegment+0xa0>
        int duration = beatlength * rhythmn[i];
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a25      	ldr	r2, [pc, #148]	@ (8000690 <playSegment+0xb4>)
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	613b      	str	r3, [r7, #16]
        if (melody[i] == rest) {
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000612:	d10c      	bne.n	800062e <playSegment+0x52>
            REST(duration);
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	f7ff ffd3 	bl	80005c2 <Stop_PWM>
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fee6 	bl	80013f0 <HAL_Delay>
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f7ff ffbe 	bl	80005a8 <Start_PWM>
 800062c:	e00b      	b.n	8000646 <playSegment+0x6a>
        } else {
            Tone(melody[i]);
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff99 	bl	8000570 <Tone>
            HAL_Delay(duration);
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fed5 	bl	80013f0 <HAL_Delay>
        }
        REST(duration * beatseparationconstant);
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f7ff ffba 	bl	80005c2 <Stop_PWM>
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <playSegment+0xb8>)
 800065a:	edd3 7a00 	vldr	s15, [r3]
 800065e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000666:	ee17 0a90 	vmov	r0, s15
 800066a:	f000 fec1 	bl	80013f0 <HAL_Delay>
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ff99 	bl	80005a8 <Start_PWM>
    for (int i = 0; i < length; i++) {
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	3301      	adds	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	6a3b      	ldr	r3, [r7, #32]
 8000680:	429a      	cmp	r2, r3
 8000682:	dbb5      	blt.n	80005f0 <playSegment+0x14>
    }
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000004 	.word	0x20000004
 8000694:	20000008 	.word	0x20000008

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
//	GPIO_PinState state;
	uint8_t X = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	75fb      	strb	r3, [r7, #23]
	uint32_t last_tick = HAL_GetTick();
 80006a2:	f000 fe99 	bl	80013d8 <HAL_GetTick>
 80006a6:	6138      	str	r0, [r7, #16]
	uint8_t started = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
	countdown_index = 0;
 80006ac:	4baa      	ldr	r3, [pc, #680]	@ (8000958 <main+0x2c0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
	uint8_t reset_down = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73bb      	strb	r3, [r7, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f000 fe29 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f9a7 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 fb25 	bl	8000d0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 faf9 	bl	8000cb8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006c6:	f000 fa7f 	bl	8000bc8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80006ca:	f000 facb 	bl	8000c64 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006ce:	f000 fa07 	bl	8000ae0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Tone(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d6:	f7ff ff4b 	bl	8000570 <Tone>

//  Start_PWM(&htim2, TIM_CHANNEL_2);
//  PlayBootUpSong(1000);
//  Stop_PWM(&htim2, TIM_CHANNEL_2);
//  PlayJazzyIntro(&htim2, TIM_CHANNEL_2, 500);
  Start_PWM(&htim2, TIM_CHANNEL_2);
 80006da:	2104      	movs	r1, #4
 80006dc:	489f      	ldr	r0, [pc, #636]	@ (800095c <main+0x2c4>)
 80006de:	f7ff ff63 	bl	80005a8 <Start_PWM>

  // Play Chorus
  playSegment(&htim2, TIM_CHANNEL_2, song1_chorus_melody, song1_chorus_rhythmn, sizeof(song1_chorus_melody) / sizeof(int));
 80006e2:	233b      	movs	r3, #59	@ 0x3b
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	4b9e      	ldr	r3, [pc, #632]	@ (8000960 <main+0x2c8>)
 80006e8:	4a9e      	ldr	r2, [pc, #632]	@ (8000964 <main+0x2cc>)
 80006ea:	2104      	movs	r1, #4
 80006ec:	489b      	ldr	r0, [pc, #620]	@ (800095c <main+0x2c4>)
 80006ee:	f7ff ff75 	bl	80005dc <playSegment>

//  playSegment(&htim2, TIM_CHANNEL_2, melody, rhythmn, sizeof(melody) / sizeof(int));

  Stop_PWM(&htim2, TIM_CHANNEL_2);
 80006f2:	2104      	movs	r1, #4
 80006f4:	4899      	ldr	r0, [pc, #612]	@ (800095c <main+0x2c4>)
 80006f6:	f7ff ff64 	bl	80005c2 <Stop_PWM>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() - last_tick >= 1000) {
 80006fa:	f000 fe6d 	bl	80013d8 <HAL_GetTick>
 80006fe:	4602      	mov	r2, r0
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000708:	d30a      	bcc.n	8000720 <main+0x88>
		  last_tick = HAL_GetTick();  // Update the last tick
 800070a:	f000 fe65 	bl	80013d8 <HAL_GetTick>
 800070e:	6138      	str	r0, [r7, #16]
		  printf("Hello World! %u \r\n", X);
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	4619      	mov	r1, r3
 8000714:	4894      	ldr	r0, [pc, #592]	@ (8000968 <main+0x2d0>)
 8000716:	f003 f9f7 	bl	8003b08 <iprintf>
		  ++X;
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	3301      	adds	r3, #1
 800071e:	75fb      	strb	r3, [r7, #23]
	  }

	  // Start button pressed: begin countdown, enable all LEDs, play sound
	  if (!started && countdown_index >= 0 && HAL_GPIO_ReadPin(GPIOB, START_BUTTON_PIN) == GPIO_PIN_RESET) {
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d136      	bne.n	8000794 <main+0xfc>
 8000726:	4b8c      	ldr	r3, [pc, #560]	@ (8000958 <main+0x2c0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	db32      	blt.n	8000794 <main+0xfc>
 800072e:	2120      	movs	r1, #32
 8000730:	488e      	ldr	r0, [pc, #568]	@ (800096c <main+0x2d4>)
 8000732:	f001 f917 	bl	8001964 <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d12b      	bne.n	8000794 <main+0xfc>
		  printf("Start button is pressed. \r\n");
 800073c:	488c      	ldr	r0, [pc, #560]	@ (8000970 <main+0x2d8>)
 800073e:	f003 fa4b 	bl	8003bd8 <puts>

		  tx_buff[0] = 0;
 8000742:	4b8c      	ldr	r3, [pc, #560]	@ (8000974 <main+0x2dc>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, tx_buff, 1, 100);
 8000748:	2364      	movs	r3, #100	@ 0x64
 800074a:	2201      	movs	r2, #1
 800074c:	4989      	ldr	r1, [pc, #548]	@ (8000974 <main+0x2dc>)
 800074e:	488a      	ldr	r0, [pc, #552]	@ (8000978 <main+0x2e0>)
 8000750:	f002 fcc6 	bl	80030e0 <HAL_UART_Transmit>

		  started = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]

		  for (int i = 0; i < NUM_LEDS; ++i) {
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	e00f      	b.n	800077e <main+0xe6>
			  HAL_GPIO_WritePin(led_pins[i].Port, led_pins[i].Pin, GPIO_PIN_SET);
 800075e:	4a87      	ldr	r2, [pc, #540]	@ (800097c <main+0x2e4>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000766:	4a85      	ldr	r2, [pc, #532]	@ (800097c <main+0x2e4>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	4413      	add	r3, r2
 800076e:	889b      	ldrh	r3, [r3, #4]
 8000770:	2201      	movs	r2, #1
 8000772:	4619      	mov	r1, r3
 8000774:	f001 f90e 	bl	8001994 <HAL_GPIO_WritePin>
		  for (int i = 0; i < NUM_LEDS; ++i) {
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	3301      	adds	r3, #1
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	2b09      	cmp	r3, #9
 8000782:	ddec      	ble.n	800075e <main+0xc6>
		  }

		  countdown_index = 0;
 8000784:	4b74      	ldr	r3, [pc, #464]	@ (8000958 <main+0x2c0>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
		  countdown_timer = HAL_GetTick(); // Initialize timer
 800078a:	f000 fe25 	bl	80013d8 <HAL_GetTick>
 800078e:	4603      	mov	r3, r0
 8000790:	4a7b      	ldr	r2, [pc, #492]	@ (8000980 <main+0x2e8>)
 8000792:	6013      	str	r3, [r2, #0]
	  }

	  // Non-blocking LED countdown logic
	  if (countdown_index < NUM_LEDS && HAL_GetTick() - countdown_timer >= 1000 && started) {
 8000794:	4b70      	ldr	r3, [pc, #448]	@ (8000958 <main+0x2c0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b09      	cmp	r3, #9
 800079a:	dc24      	bgt.n	80007e6 <main+0x14e>
 800079c:	f000 fe1c 	bl	80013d8 <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	4b77      	ldr	r3, [pc, #476]	@ (8000980 <main+0x2e8>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007ac:	d31b      	bcc.n	80007e6 <main+0x14e>
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d018      	beq.n	80007e6 <main+0x14e>
		  HAL_GPIO_WritePin(led_pins[countdown_index].Port, led_pins[countdown_index].Pin, GPIO_PIN_RESET); // Turn off LED
 80007b4:	4b68      	ldr	r3, [pc, #416]	@ (8000958 <main+0x2c0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a70      	ldr	r2, [pc, #448]	@ (800097c <main+0x2e4>)
 80007ba:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007be:	4b66      	ldr	r3, [pc, #408]	@ (8000958 <main+0x2c0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a6e      	ldr	r2, [pc, #440]	@ (800097c <main+0x2e4>)
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	4413      	add	r3, r2
 80007c8:	889b      	ldrh	r3, [r3, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	f001 f8e1 	bl	8001994 <HAL_GPIO_WritePin>
		  countdown_timer = HAL_GetTick(); // Reset timer for next LED
 80007d2:	f000 fe01 	bl	80013d8 <HAL_GetTick>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a69      	ldr	r2, [pc, #420]	@ (8000980 <main+0x2e8>)
 80007da:	6013      	str	r3, [r2, #0]
//		  printf("Increment! \r\n");
		  countdown_index++;
 80007dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000958 <main+0x2c0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	4a5d      	ldr	r2, [pc, #372]	@ (8000958 <main+0x2c0>)
 80007e4:	6013      	str	r3, [r2, #0]
	  }

	  if (countdown_index >= NUM_LEDS && started) {
 80007e6:	4b5c      	ldr	r3, [pc, #368]	@ (8000958 <main+0x2c0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b09      	cmp	r3, #9
 80007ec:	dd1c      	ble.n	8000828 <main+0x190>
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d019      	beq.n	8000828 <main+0x190>
//		  printf("Huh? %u \r\n", countdown_index);
		  started = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
		  buzzer_tick = HAL_GetTick() - 400;
 80007f8:	f000 fdee 	bl	80013d8 <HAL_GetTick>
 80007fc:	4603      	mov	r3, r0
 80007fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000802:	4a60      	ldr	r2, [pc, #384]	@ (8000984 <main+0x2ec>)
 8000804:	6013      	str	r3, [r2, #0]

		  tx_buff[0] = 1;
 8000806:	4b5b      	ldr	r3, [pc, #364]	@ (8000974 <main+0x2dc>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, tx_buff, 1, 100);
 800080c:	2364      	movs	r3, #100	@ 0x64
 800080e:	2201      	movs	r2, #1
 8000810:	4958      	ldr	r1, [pc, #352]	@ (8000974 <main+0x2dc>)
 8000812:	4859      	ldr	r0, [pc, #356]	@ (8000978 <main+0x2e0>)
 8000814:	f002 fc64 	bl	80030e0 <HAL_UART_Transmit>

//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Turn on buzzer
		  Tone(800);
 8000818:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800081c:	f7ff fea8 	bl	8000570 <Tone>
		  Start_PWM(&htim2, TIM_CHANNEL_2);
 8000820:	2104      	movs	r1, #4
 8000822:	484e      	ldr	r0, [pc, #312]	@ (800095c <main+0x2c4>)
 8000824:	f7ff fec0 	bl	80005a8 <Start_PWM>
	  }

	  if (HAL_GetTick() - buzzer_tick >= 800) {
 8000828:	f000 fdd6 	bl	80013d8 <HAL_GetTick>
 800082c:	4602      	mov	r2, r0
 800082e:	4b55      	ldr	r3, [pc, #340]	@ (8000984 <main+0x2ec>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000838:	d303      	bcc.n	8000842 <main+0x1aa>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // Turn off buzzer
		  Stop_PWM(&htim2, TIM_CHANNEL_2);
 800083a:	2104      	movs	r1, #4
 800083c:	4847      	ldr	r0, [pc, #284]	@ (800095c <main+0x2c4>)
 800083e:	f7ff fec0 	bl	80005c2 <Stop_PWM>

	  // Disable inputs after countdown
//	  if (countdown_index >= NUM_LEDS) {
//		  HAL_GPIO_WritePin(COMM_PORT, COMM_PIN, GPIO_PIN_RESET); // Disable further inputs
//	  }
	  if (HAL_UART_Receive(&huart1, rx_buff, 1, 10) == HAL_OK) {
 8000842:	230a      	movs	r3, #10
 8000844:	2201      	movs	r2, #1
 8000846:	4950      	ldr	r1, [pc, #320]	@ (8000988 <main+0x2f0>)
 8000848:	484b      	ldr	r0, [pc, #300]	@ (8000978 <main+0x2e0>)
 800084a:	f002 fcd4 	bl	80031f6 <HAL_UART_Receive>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d130      	bne.n	80008b6 <main+0x21e>
		  printf("rx_buff contents: ");
 8000854:	484d      	ldr	r0, [pc, #308]	@ (800098c <main+0x2f4>)
 8000856:	f003 f957 	bl	8003b08 <iprintf>
		  if (rx_buff[0] == 2) {
 800085a:	4b4b      	ldr	r3, [pc, #300]	@ (8000988 <main+0x2f0>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d115      	bne.n	800088e <main+0x1f6>
			  buzzer_tick = HAL_GetTick();
 8000862:	f000 fdb9 	bl	80013d8 <HAL_GetTick>
 8000866:	4603      	mov	r3, r0
 8000868:	4a46      	ldr	r2, [pc, #280]	@ (8000984 <main+0x2ec>)
 800086a:	6013      	str	r3, [r2, #0]
//			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Turn on buzzer
			  Tone(1200);
 800086c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000870:	f7ff fe7e 	bl	8000570 <Tone>
			  Start_PWM(&htim2, TIM_CHANNEL_2);
 8000874:	2104      	movs	r1, #4
 8000876:	4839      	ldr	r0, [pc, #228]	@ (800095c <main+0x2c4>)
 8000878:	f7ff fe96 	bl	80005a8 <Start_PWM>
			  started = 0; // stop the counter
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
			  countdown_index = -(countdown_index + 10);
 8000880:	4b35      	ldr	r3, [pc, #212]	@ (8000958 <main+0x2c0>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	f06f 0309 	mvn.w	r3, #9
 8000888:	1a9b      	subs	r3, r3, r2
 800088a:	4a33      	ldr	r2, [pc, #204]	@ (8000958 <main+0x2c0>)
 800088c:	6013      	str	r3, [r2, #0]
		  }

		  for (size_t i = 0; i < sizeof(rx_buff); i++) {
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	e00a      	b.n	80008aa <main+0x212>
//			  printf("%u ", rx_buff[i]); // Print as decimal
			  printf("0x%02X ", rx_buff[i]); // Print as hexadecimal
 8000894:	4a3c      	ldr	r2, [pc, #240]	@ (8000988 <main+0x2f0>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	483c      	ldr	r0, [pc, #240]	@ (8000990 <main+0x2f8>)
 80008a0:	f003 f932 	bl	8003b08 <iprintf>
		  for (size_t i = 0; i < sizeof(rx_buff); i++) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d0f1      	beq.n	8000894 <main+0x1fc>
		  }
		  printf(" \r\n");
 80008b0:	4838      	ldr	r0, [pc, #224]	@ (8000994 <main+0x2fc>)
 80008b2:	f003 f991 	bl	8003bd8 <puts>
	  }

	  // Reset button handling
	  if (!reset_down && HAL_GPIO_ReadPin(GPIOB, RESET_BUTTON_PIN) == GPIO_PIN_RESET) {
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f040 808d 	bne.w	80009d8 <main+0x340>
 80008be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c2:	482a      	ldr	r0, [pc, #168]	@ (800096c <main+0x2d4>)
 80008c4:	f001 f84e 	bl	8001964 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f040 8084 	bne.w	80009d8 <main+0x340>
		  printf("Reset button is pressed. \r\n");
 80008d0:	4831      	ldr	r0, [pc, #196]	@ (8000998 <main+0x300>)
 80008d2:	f003 f981 	bl	8003bd8 <puts>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Turn on buzzer
		  Tone(500);
 80008d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008da:	f7ff fe49 	bl	8000570 <Tone>
		  Start_PWM(&htim2, TIM_CHANNEL_2);
 80008de:	2104      	movs	r1, #4
 80008e0:	481e      	ldr	r0, [pc, #120]	@ (800095c <main+0x2c4>)
 80008e2:	f7ff fe61 	bl	80005a8 <Start_PWM>
		  tx_buff[0] = 2;
 80008e6:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <main+0x2dc>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	701a      	strb	r2, [r3, #0]

		  buzzer_tick = HAL_GetTick() - 750;
 80008ec:	f000 fd74 	bl	80013d8 <HAL_GetTick>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 80008f6:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <main+0x2ec>)
 80008f8:	6013      	str	r3, [r2, #0]

		  // reset all the states

		  X = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	75fb      	strb	r3, [r7, #23]
		  last_tick = HAL_GetTick();
 80008fe:	f000 fd6b 	bl	80013d8 <HAL_GetTick>
 8000902:	6138      	str	r0, [r7, #16]
		  if (countdown_index >= 0) {
 8000904:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <main+0x2c0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db47      	blt.n	800099c <main+0x304>
			  countdown_index = 0;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <main+0x2c0>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
			  countdown_timer = 0;
 8000912:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <main+0x2e8>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
			  started = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]
			  for (size_t i = 0; i < NUM_LEDS; ++i) {
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	e00f      	b.n	8000942 <main+0x2aa>
				  HAL_GPIO_WritePin(led_pins[i].Port, led_pins[i].Pin, GPIO_PIN_RESET);
 8000922:	4a16      	ldr	r2, [pc, #88]	@ (800097c <main+0x2e4>)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800092a:	4a14      	ldr	r2, [pc, #80]	@ (800097c <main+0x2e4>)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	4413      	add	r3, r2
 8000932:	889b      	ldrh	r3, [r3, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	f001 f82c 	bl	8001994 <HAL_GPIO_WritePin>
			  for (size_t i = 0; i < NUM_LEDS; ++i) {
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	2b09      	cmp	r3, #9
 8000946:	d9ec      	bls.n	8000922 <main+0x28a>
			  }
			  HAL_UART_Transmit(&huart1, tx_buff, 1, 100);
 8000948:	2364      	movs	r3, #100	@ 0x64
 800094a:	2201      	movs	r2, #1
 800094c:	4909      	ldr	r1, [pc, #36]	@ (8000974 <main+0x2dc>)
 800094e:	480a      	ldr	r0, [pc, #40]	@ (8000978 <main+0x2e0>)
 8000950:	f002 fbc6 	bl	80030e0 <HAL_UART_Transmit>
 8000954:	e03e      	b.n	80009d4 <main+0x33c>
 8000956:	bf00      	nop
 8000958:	2000038c 	.word	0x2000038c
 800095c:	20000268 	.word	0x20000268
 8000960:	200000f8 	.word	0x200000f8
 8000964:	2000000c 	.word	0x2000000c
 8000968:	080048b4 	.word	0x080048b4
 800096c:	40020400 	.word	0x40020400
 8000970:	080048c8 	.word	0x080048c8
 8000974:	20000000 	.word	0x20000000
 8000978:	200002f8 	.word	0x200002f8
 800097c:	08004948 	.word	0x08004948
 8000980:	20000388 	.word	0x20000388
 8000984:	20000390 	.word	0x20000390
 8000988:	20000394 	.word	0x20000394
 800098c:	080048e4 	.word	0x080048e4
 8000990:	080048f8 	.word	0x080048f8
 8000994:	08004900 	.word	0x08004900
 8000998:	08004904 	.word	0x08004904
		  } else {
			  // previous reset had timer still going
			  started = 1;
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
			  countdown_index = MAX(abs(countdown_index) - 11, 0);
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <main+0x360>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bfb8      	it	lt
 80009a8:	425b      	neglt	r3, r3
 80009aa:	2b0b      	cmp	r3, #11
 80009ac:	dd06      	ble.n	80009bc <main+0x324>
 80009ae:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <main+0x360>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bfb8      	it	lt
 80009b6:	425b      	neglt	r3, r3
 80009b8:	3b0b      	subs	r3, #11
 80009ba:	e000      	b.n	80009be <main+0x326>
 80009bc:	2300      	movs	r3, #0
 80009be:	4a0e      	ldr	r2, [pc, #56]	@ (80009f8 <main+0x360>)
 80009c0:	6013      	str	r3, [r2, #0]
			  countdown_timer = 0;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <main+0x364>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, tx_buff, 3, 100);
 80009c8:	2364      	movs	r3, #100	@ 0x64
 80009ca:	2203      	movs	r2, #3
 80009cc:	490c      	ldr	r1, [pc, #48]	@ (8000a00 <main+0x368>)
 80009ce:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <main+0x36c>)
 80009d0:	f002 fb86 	bl	80030e0 <HAL_UART_Transmit>
		  }

		  reset_down = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73bb      	strb	r3, [r7, #14]

//		  HAL_NVIC_SystemReset();
	  }

	  // wait until button is released
	  if (reset_down && HAL_GPIO_ReadPin(GPIOB, RESET_BUTTON_PIN) != GPIO_PIN_RESET) {
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f43f ae8d 	beq.w	80006fa <main+0x62>
 80009e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e4:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <main+0x370>)
 80009e6:	f000 ffbd 	bl	8001964 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f43f ae84 	beq.w	80006fa <main+0x62>
		  reset_down = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73bb      	strb	r3, [r7, #14]
	  if (HAL_GetTick() - last_tick >= 1000) {
 80009f6:	e680      	b.n	80006fa <main+0x62>
 80009f8:	2000038c 	.word	0x2000038c
 80009fc:	20000388 	.word	0x20000388
 8000a00:	20000000 	.word	0x20000000
 8000a04:	200002f8 	.word	0x200002f8
 8000a08:	40020400 	.word	0x40020400

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	@ 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	2230      	movs	r2, #48	@ 0x30
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 f8e4 	bl	8003be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <SystemClock_Config+0xcc>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	4a27      	ldr	r2, [pc, #156]	@ (8000ad8 <SystemClock_Config+0xcc>)
 8000a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a40:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <SystemClock_Config+0xcc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4b22      	ldr	r3, [pc, #136]	@ (8000adc <SystemClock_Config+0xd0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a58:	4a20      	ldr	r2, [pc, #128]	@ (8000adc <SystemClock_Config+0xd0>)
 8000a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <SystemClock_Config+0xd0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a80:	2308      	movs	r3, #8
 8000a82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000a84:	2354      	movs	r3, #84	@ 0x54
 8000a86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 ffaf 	bl	80019f8 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aa0:	f000 fa06 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fa11 	bl	8001ee8 <HAL_RCC_ClockConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000acc:	f000 f9f0 	bl	8000eb0 <Error_Handler>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3750      	adds	r7, #80	@ 0x50
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	@ 0x38
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b18:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b1a:	2253      	movs	r2, #83	@ 0x53
 8000b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000b24:	4b27      	ldr	r3, [pc, #156]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b26:	22f9      	movs	r2, #249	@ 0xf9
 8000b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b30:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b32:	2280      	movs	r2, #128	@ 0x80
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b36:	4823      	ldr	r0, [pc, #140]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b38:	f001 fbf6 	bl	8002328 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b42:	f000 f9b5 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b50:	4619      	mov	r1, r3
 8000b52:	481c      	ldr	r0, [pc, #112]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b54:	f001 fe66 	bl	8002824 <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b5e:	f000 f9a7 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b62:	4818      	ldr	r0, [pc, #96]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b64:	f001 fc2f 	bl	80023c6 <HAL_TIM_PWM_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b6e:	f000 f99f 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4810      	ldr	r0, [pc, #64]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b82:	f002 f9ef 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b8c:	f000 f990 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b90:	2360      	movs	r3, #96	@ 0x60
 8000b92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8000b94:	237d      	movs	r3, #125	@ 0x7d
 8000b96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4807      	ldr	r0, [pc, #28]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000ba8:	f001 fd7a 	bl	80026a0 <HAL_TIM_PWM_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000bb2:	f000 f97d 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bb6:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <MX_TIM2_Init+0xe4>)
 8000bb8:	f000 f9de 	bl	8000f78 <HAL_TIM_MspPostInit>

}
 8000bbc:	bf00      	nop
 8000bbe:	3738      	adds	r7, #56	@ 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000268 	.word	0x20000268

08000bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_TIM3_Init+0x94>)
 8000be6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c60 <MX_TIM3_Init+0x98>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_TIM3_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_TIM3_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_TIM3_Init+0x94>)
 8000bf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_TIM3_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_TIM3_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c0a:	4814      	ldr	r0, [pc, #80]	@ (8000c5c <MX_TIM3_Init+0x94>)
 8000c0c:	f001 fb8c 	bl	8002328 <HAL_TIM_Base_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c16:	f000 f94b 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4619      	mov	r1, r3
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_TIM3_Init+0x94>)
 8000c28:	f001 fdfc 	bl	8002824 <HAL_TIM_ConfigClockSource>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c32:	f000 f93d 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <MX_TIM3_Init+0x94>)
 8000c44:	f002 f98e 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c4e:	f000 f92f 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200002b0 	.word	0x200002b0
 8000c60:	40000400 	.word	0x40000400

08000c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <MX_USART1_UART_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c9c:	f002 f9d0 	bl	8003040 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f903 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200002f8 	.word	0x200002f8
 8000cb4:	40011000 	.word	0x40011000

08000cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <MX_USART2_UART_Init+0x50>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	f002 f9a6 	bl	8003040 <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cfa:	f000 f8d9 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000340 	.word	0x20000340
 8000d08:	40004400 	.word	0x40004400

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b4e      	ldr	r3, [pc, #312]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a4d      	ldr	r2, [pc, #308]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b4b      	ldr	r3, [pc, #300]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b47      	ldr	r3, [pc, #284]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a46      	ldr	r2, [pc, #280]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b44      	ldr	r3, [pc, #272]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	4b40      	ldr	r3, [pc, #256]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a3f      	ldr	r2, [pc, #252]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a38      	ldr	r2, [pc, #224]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b36      	ldr	r3, [pc, #216]	@ (8000e60 <MX_GPIO_Init+0x154>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000d92:	2200      	movs	r2, #0
 8000d94:	f248 11e0 	movw	r1, #33248	@ 0x81e0
 8000d98:	4832      	ldr	r0, [pc, #200]	@ (8000e64 <MX_GPIO_Init+0x158>)
 8000d9a:	f000 fdfb 	bl	8001994 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000da4:	4830      	ldr	r0, [pc, #192]	@ (8000e68 <MX_GPIO_Init+0x15c>)
 8000da6:	f000 fdf5 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000db0:	482e      	ldr	r0, [pc, #184]	@ (8000e6c <MX_GPIO_Init+0x160>)
 8000db2:	f000 fdef 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dbc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4827      	ldr	r0, [pc, #156]	@ (8000e6c <MX_GPIO_Init+0x160>)
 8000dce:	f000 fc45 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA15 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000dd2:	f248 13e0 	movw	r3, #33248	@ 0x81e0
 8000dd6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	@ (8000e64 <MX_GPIO_Init+0x158>)
 8000dec:	f000 fc36 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_9;
 8000df0:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4817      	ldr	r0, [pc, #92]	@ (8000e68 <MX_GPIO_Init+0x15c>)
 8000e0a:	f000 fc27 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000e0e:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4811      	ldr	r0, [pc, #68]	@ (8000e68 <MX_GPIO_Init+0x15c>)
 8000e24:	f000 fc1a 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e28:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480a      	ldr	r0, [pc, #40]	@ (8000e6c <MX_GPIO_Init+0x160>)
 8000e42:	f000 fc0b 	bl	800165c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2028      	movs	r0, #40	@ 0x28
 8000e4c:	f000 fbcf 	bl	80015ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e50:	2028      	movs	r0, #40	@ 0x28
 8000e52:	f000 fbe8 	bl	8001626 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	@ 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020800 	.word	0x40020800

08000e70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
	printf("Test button press trigger callback \r\n");
 8000e7a:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x18>)
 8000e7c:	f002 feac 	bl	8003bd8 <puts>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	08004920 	.word	0x08004920

08000e8c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000e94:	1d39      	adds	r1, r7, #4
 8000e96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4803      	ldr	r0, [pc, #12]	@ (8000eac <__io_putchar+0x20>)
 8000e9e:	f002 f91f 	bl	80030e0 <HAL_UART_Transmit>

  return ch;
 8000ea2:	687b      	ldr	r3, [r7, #4]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000340 	.word	0x20000340

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <Error_Handler+0x8>

08000ebc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000efa:	2007      	movs	r0, #7
 8000efc:	f000 fb6c 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f1c:	d10e      	bne.n	8000f3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <HAL_TIM_Base_MspInit+0x64>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <HAL_TIM_Base_MspInit+0x64>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <HAL_TIM_Base_MspInit+0x64>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f3a:	e012      	b.n	8000f62 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0c      	ldr	r2, [pc, #48]	@ (8000f74 <HAL_TIM_Base_MspInit+0x68>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_TIM_Base_MspInit+0x64>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_TIM_Base_MspInit+0x64>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_TIM_Base_MspInit+0x64>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40000400 	.word	0x40000400

08000f78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f98:	d11d      	bne.n	8000fd6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <HAL_TIM_MspPostInit+0x68>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <HAL_TIM_MspPostInit+0x68>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <HAL_TIM_MspPostInit+0x68>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <HAL_TIM_MspPostInit+0x6c>)
 8000fd2:	f000 fb43 	bl	800165c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	@ 0x30
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a32      	ldr	r2, [pc, #200]	@ (80010d0 <HAL_UART_MspInit+0xe8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12d      	bne.n	8001066 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	4b31      	ldr	r3, [pc, #196]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	4a30      	ldr	r2, [pc, #192]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6453      	str	r3, [r2, #68]	@ 0x44
 800101a:	4b2e      	ldr	r3, [pc, #184]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	4b2a      	ldr	r3, [pc, #168]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a29      	ldr	r2, [pc, #164]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b27      	ldr	r3, [pc, #156]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001042:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001054:	2307      	movs	r3, #7
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	481e      	ldr	r0, [pc, #120]	@ (80010d8 <HAL_UART_MspInit+0xf0>)
 8001060:	f000 fafc 	bl	800165c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001064:	e030      	b.n	80010c8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <HAL_UART_MspInit+0xf4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d12b      	bne.n	80010c8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	4a16      	ldr	r2, [pc, #88]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 800107a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800107e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	4a0f      	ldr	r2, [pc, #60]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6313      	str	r3, [r2, #48]	@ 0x30
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HAL_UART_MspInit+0xec>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010a8:	230c      	movs	r3, #12
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b8:	2307      	movs	r3, #7
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <HAL_UART_MspInit+0xf0>)
 80010c4:	f000 faca 	bl	800165c <HAL_GPIO_Init>
}
 80010c8:	bf00      	nop
 80010ca:	3730      	adds	r7, #48	@ 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40011000 	.word	0x40011000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40004400 	.word	0x40004400

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <NMI_Handler+0x4>

080010e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <MemManage_Handler+0x4>

080010f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <UsageFault_Handler+0x4>

08001108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001136:	f000 f93b 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}

0800113e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001142:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001146:	f000 fc3f 	bl	80019c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e00a      	b.n	8001176 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001160:	f3af 8000 	nop.w
 8001164:	4601      	mov	r1, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	60ba      	str	r2, [r7, #8]
 800116c:	b2ca      	uxtb	r2, r1
 800116e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	dbf0      	blt.n	8001160 <_read+0x12>
  }

  return len;
 800117e:	687b      	ldr	r3, [r7, #4]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e009      	b.n	80011ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	60ba      	str	r2, [r7, #8]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fe72 	bl	8000e8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dbf1      	blt.n	800119a <_write+0x12>
  }
  return len;
 80011b6:	687b      	ldr	r3, [r7, #4]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_close>:

int _close(int file)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e8:	605a      	str	r2, [r3, #4]
  return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_isatty>:

int _isatty(int file)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f002 fcce 	bl	8003bf8 <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20018000 	.word	0x20018000
 8001288:	00000400 	.word	0x00000400
 800128c:	20000398 	.word	0x20000398
 8001290:	200004f0 	.word	0x200004f0

08001294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012bc:	f7ff ffea 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f002 fc8d 	bl	8003c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff f9d5 	bl	8000698 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80012fc:	080049f4 	.word	0x080049f4
  ldr r2, =_sbss
 8001300:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8001304:	200004ec 	.word	0x200004ec

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <HAL_Init+0x40>)
 8001316:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800131a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_Init+0x40>)
 8001322:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a07      	ldr	r2, [pc, #28]	@ (800134c <HAL_Init+0x40>)
 800132e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 f94f 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f808 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff fdbc 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023c00 	.word	0x40023c00

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f967 	bl	8001642 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800138c:	f000 f92f 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001e4 	.word	0x200001e4
 80013a8:	200001ec 	.word	0x200001ec
 80013ac:	200001e8 	.word	0x200001e8

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200001ec 	.word	0x200001ec
 80013d4:	2000039c 	.word	0x2000039c

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2000039c 	.word	0x2000039c

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001ec 	.word	0x200001ec

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	@ (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	@ (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	@ (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	@ (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	@ 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff3e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff31 	bl	800149c <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	e159      	b.n	800192c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001678:	2201      	movs	r2, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 8148 	bne.w	8001926 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d005      	beq.n	80016ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d130      	bne.n	8001710 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e4:	2201      	movs	r2, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 0201 	and.w	r2, r3, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b03      	cmp	r3, #3
 800171a:	d017      	beq.n	800174c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d123      	bne.n	80017a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	69b9      	ldr	r1, [r7, #24]
 800179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0203 	and.w	r2, r3, #3
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a2 	beq.w	8001926 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <HAL_GPIO_Init+0x2e8>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	4a56      	ldr	r2, [pc, #344]	@ (8001944 <HAL_GPIO_Init+0x2e8>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f2:	4b54      	ldr	r3, [pc, #336]	@ (8001944 <HAL_GPIO_Init+0x2e8>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017fe:	4a52      	ldr	r2, [pc, #328]	@ (8001948 <HAL_GPIO_Init+0x2ec>)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a49      	ldr	r2, [pc, #292]	@ (800194c <HAL_GPIO_Init+0x2f0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0x202>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a48      	ldr	r2, [pc, #288]	@ (8001950 <HAL_GPIO_Init+0x2f4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0x1fe>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a47      	ldr	r2, [pc, #284]	@ (8001954 <HAL_GPIO_Init+0x2f8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00d      	beq.n	8001856 <HAL_GPIO_Init+0x1fa>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a46      	ldr	r2, [pc, #280]	@ (8001958 <HAL_GPIO_Init+0x2fc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d007      	beq.n	8001852 <HAL_GPIO_Init+0x1f6>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a45      	ldr	r2, [pc, #276]	@ (800195c <HAL_GPIO_Init+0x300>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_GPIO_Init+0x1f2>
 800184a:	2304      	movs	r3, #4
 800184c:	e008      	b.n	8001860 <HAL_GPIO_Init+0x204>
 800184e:	2307      	movs	r3, #7
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x204>
 8001852:	2303      	movs	r3, #3
 8001854:	e004      	b.n	8001860 <HAL_GPIO_Init+0x204>
 8001856:	2302      	movs	r3, #2
 8001858:	e002      	b.n	8001860 <HAL_GPIO_Init+0x204>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x204>
 800185e:	2300      	movs	r3, #0
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f002 0203 	and.w	r2, r2, #3
 8001866:	0092      	lsls	r2, r2, #2
 8001868:	4093      	lsls	r3, r2
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001870:	4935      	ldr	r1, [pc, #212]	@ (8001948 <HAL_GPIO_Init+0x2ec>)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187e:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <HAL_GPIO_Init+0x304>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018cc:	4a24      	ldr	r2, [pc, #144]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d2:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_GPIO_Init+0x304>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001920:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_GPIO_Init+0x304>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3301      	adds	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2b0f      	cmp	r3, #15
 8001930:	f67f aea2 	bls.w	8001678 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40013800 	.word	0x40013800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400
 8001954:	40020800 	.word	0x40020800
 8001958:	40020c00 	.word	0x40020c00
 800195c:	40021000 	.word	0x40021000
 8001960:	40013c00 	.word	0x40013c00

08001964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e001      	b.n	8001986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b0:	e003      	b.n	80019ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	041a      	lsls	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	619a      	str	r2, [r3, #24]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fa42 	bl	8000e70 <HAL_GPIO_EXTI_Callback>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40013c00 	.word	0x40013c00

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e267      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d075      	beq.n	8001b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a16:	4b88      	ldr	r3, [pc, #544]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d00c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a22:	4b85      	ldr	r3, [pc, #532]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d112      	bne.n	8001a54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2e:	4b82      	ldr	r3, [pc, #520]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a3a:	d10b      	bne.n	8001a54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d05b      	beq.n	8001b00 <HAL_RCC_OscConfig+0x108>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d157      	bne.n	8001b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e242      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x74>
 8001a5e:	4b76      	ldr	r3, [pc, #472]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a75      	ldr	r2, [pc, #468]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e01d      	b.n	8001aa8 <HAL_RCC_OscConfig+0xb0>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x98>
 8001a76:	4b70      	ldr	r3, [pc, #448]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6f      	ldr	r2, [pc, #444]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b6d      	ldr	r3, [pc, #436]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6c      	ldr	r2, [pc, #432]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0xb0>
 8001a90:	4b69      	ldr	r3, [pc, #420]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a68      	ldr	r2, [pc, #416]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b66      	ldr	r3, [pc, #408]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a65      	ldr	r2, [pc, #404]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fc92 	bl	80013d8 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fc8e 	bl	80013d8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	@ 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e207      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b5b      	ldr	r3, [pc, #364]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xc0>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fc7e 	bl	80013d8 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fc7a 	bl	80013d8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	@ 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1f3      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	4b51      	ldr	r3, [pc, #324]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xe8>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d063      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1a:	4b47      	ldr	r3, [pc, #284]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d11c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b26:	4b44      	ldr	r3, [pc, #272]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d116      	bne.n	8001b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	4b41      	ldr	r3, [pc, #260]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_RCC_OscConfig+0x152>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e1c7      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4937      	ldr	r1, [pc, #220]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	e03a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b68:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_RCC_OscConfig+0x244>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6e:	f7ff fc33 	bl	80013d8 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b76:	f7ff fc2f 	bl	80013d8 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e1a8      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	4b2b      	ldr	r3, [pc, #172]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b28      	ldr	r3, [pc, #160]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4925      	ldr	r1, [pc, #148]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	e015      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <HAL_RCC_OscConfig+0x244>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fc12 	bl	80013d8 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fc0e 	bl	80013d8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e187      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d036      	beq.n	8001c50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d016      	beq.n	8001c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_RCC_OscConfig+0x248>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fbf2 	bl	80013d8 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fbee 	bl	80013d8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e167      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x200>
 8001c16:	e01b      	b.n	8001c50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_RCC_OscConfig+0x248>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fbdb 	bl	80013d8 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	e00e      	b.n	8001c44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c26:	f7ff fbd7 	bl	80013d8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d907      	bls.n	8001c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e150      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	42470000 	.word	0x42470000
 8001c40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	4b88      	ldr	r3, [pc, #544]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ea      	bne.n	8001c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8097 	beq.w	8001d8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	4b81      	ldr	r3, [pc, #516]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10f      	bne.n	8001c8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b7d      	ldr	r3, [pc, #500]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4a7c      	ldr	r2, [pc, #496]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	4b77      	ldr	r3, [pc, #476]	@ (8001e6c <HAL_RCC_OscConfig+0x474>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d118      	bne.n	8001ccc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9a:	4b74      	ldr	r3, [pc, #464]	@ (8001e6c <HAL_RCC_OscConfig+0x474>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a73      	ldr	r2, [pc, #460]	@ (8001e6c <HAL_RCC_OscConfig+0x474>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fb97 	bl	80013d8 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cae:	f7ff fb93 	bl	80013d8 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e10c      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e6c <HAL_RCC_OscConfig+0x474>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x2ea>
 8001cd4:	4b64      	ldr	r3, [pc, #400]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd8:	4a63      	ldr	r2, [pc, #396]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce0:	e01c      	b.n	8001d1c <HAL_RCC_OscConfig+0x324>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x30c>
 8001cea:	4b5f      	ldr	r3, [pc, #380]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cee:	4a5e      	ldr	r2, [pc, #376]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfa:	4a5b      	ldr	r2, [pc, #364]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0x324>
 8001d04:	4b58      	ldr	r3, [pc, #352]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d08:	4a57      	ldr	r2, [pc, #348]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d10:	4b55      	ldr	r3, [pc, #340]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d14:	4a54      	ldr	r2, [pc, #336]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001d16:	f023 0304 	bic.w	r3, r3, #4
 8001d1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d015      	beq.n	8001d50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7ff fb58 	bl	80013d8 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fb54 	bl	80013d8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0cb      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d42:	4b49      	ldr	r3, [pc, #292]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0ee      	beq.n	8001d2c <HAL_RCC_OscConfig+0x334>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7ff fb42 	bl	80013d8 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7ff fb3e 	bl	80013d8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0b5      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ee      	bne.n	8001d58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d80:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	4a38      	ldr	r2, [pc, #224]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80a1 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d96:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d05c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d141      	bne.n	8001e2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <HAL_RCC_OscConfig+0x478>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fb12 	bl	80013d8 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff fb0e 	bl	80013d8 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e087      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	019b      	lsls	r3, r3, #6
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	3b01      	subs	r3, #1
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	491b      	ldr	r1, [pc, #108]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <HAL_RCC_OscConfig+0x478>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fae7 	bl	80013d8 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff fae3 	bl	80013d8 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e05c      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x416>
 8001e2c:	e054      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <HAL_RCC_OscConfig+0x478>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fad0 	bl	80013d8 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff facc 	bl	80013d8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e045      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_RCC_OscConfig+0x470>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x444>
 8001e5a:	e03d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e038      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_RCC_OscConfig+0x4ec>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d028      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d121      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d11a      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d111      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	085b      	lsrs	r3, r3, #1
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0cc      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b68      	ldr	r3, [pc, #416]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d90c      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b65      	ldr	r3, [pc, #404]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b63      	ldr	r3, [pc, #396]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0b8      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b59      	ldr	r3, [pc, #356]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a58      	ldr	r2, [pc, #352]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f54:	4b53      	ldr	r3, [pc, #332]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a52      	ldr	r2, [pc, #328]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b50      	ldr	r3, [pc, #320]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	494d      	ldr	r1, [pc, #308]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d044      	beq.n	8002008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d119      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e07f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e067      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4934      	ldr	r1, [pc, #208]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7ff f9fe 	bl	80013d8 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7ff f9fa 	bl	80013d8 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e04f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d20c      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e032      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4916      	ldr	r1, [pc, #88]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	490e      	ldr	r1, [pc, #56]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206e:	f000 f821 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	490a      	ldr	r1, [pc, #40]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	5ccb      	ldrb	r3, [r1, r3]
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800208a:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff f95e 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023c00 	.word	0x40023c00
 80020a4:	40023800 	.word	0x40023800
 80020a8:	08004998 	.word	0x08004998
 80020ac:	200001e4 	.word	0x200001e4
 80020b0:	200001e8 	.word	0x200001e8

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b8:	b094      	sub	sp, #80	@ 0x50
 80020ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020cc:	4b79      	ldr	r3, [pc, #484]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d00d      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x40>
 80020d8:	2b08      	cmp	r3, #8
 80020da:	f200 80e1 	bhi.w	80022a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x34>
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x3a>
 80020e6:	e0db      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020e8:	4b73      	ldr	r3, [pc, #460]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020ec:	e0db      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ee:	4b73      	ldr	r3, [pc, #460]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x208>)
 80020f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020f2:	e0d8      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f4:	4b6f      	ldr	r3, [pc, #444]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020fe:	4b6d      	ldr	r3, [pc, #436]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d063      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210a:	4b6a      	ldr	r3, [pc, #424]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	099b      	lsrs	r3, r3, #6
 8002110:	2200      	movs	r2, #0
 8002112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002114:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211c:	633b      	str	r3, [r7, #48]	@ 0x30
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	@ 0x34
 8002122:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002126:	4622      	mov	r2, r4
 8002128:	462b      	mov	r3, r5
 800212a:	f04f 0000 	mov.w	r0, #0
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	0159      	lsls	r1, r3, #5
 8002134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002138:	0150      	lsls	r0, r2, #5
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4621      	mov	r1, r4
 8002140:	1a51      	subs	r1, r2, r1
 8002142:	6139      	str	r1, [r7, #16]
 8002144:	4629      	mov	r1, r5
 8002146:	eb63 0301 	sbc.w	r3, r3, r1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002158:	4659      	mov	r1, fp
 800215a:	018b      	lsls	r3, r1, #6
 800215c:	4651      	mov	r1, sl
 800215e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002162:	4651      	mov	r1, sl
 8002164:	018a      	lsls	r2, r1, #6
 8002166:	4651      	mov	r1, sl
 8002168:	ebb2 0801 	subs.w	r8, r2, r1
 800216c:	4659      	mov	r1, fp
 800216e:	eb63 0901 	sbc.w	r9, r3, r1
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800217e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002186:	4690      	mov	r8, r2
 8002188:	4699      	mov	r9, r3
 800218a:	4623      	mov	r3, r4
 800218c:	eb18 0303 	adds.w	r3, r8, r3
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	462b      	mov	r3, r5
 8002194:	eb49 0303 	adc.w	r3, r9, r3
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021a6:	4629      	mov	r1, r5
 80021a8:	024b      	lsls	r3, r1, #9
 80021aa:	4621      	mov	r1, r4
 80021ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021b0:	4621      	mov	r1, r4
 80021b2:	024a      	lsls	r2, r1, #9
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ba:	2200      	movs	r2, #0
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021c4:	f7fe f85c 	bl	8000280 <__aeabi_uldivmod>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4613      	mov	r3, r2
 80021ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021d0:	e058      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d2:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	2200      	movs	r2, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	4611      	mov	r1, r2
 80021de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021ec:	4642      	mov	r2, r8
 80021ee:	464b      	mov	r3, r9
 80021f0:	f04f 0000 	mov.w	r0, #0
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	0159      	lsls	r1, r3, #5
 80021fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021fe:	0150      	lsls	r0, r2, #5
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4641      	mov	r1, r8
 8002206:	ebb2 0a01 	subs.w	sl, r2, r1
 800220a:	4649      	mov	r1, r9
 800220c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800221c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002220:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002224:	ebb2 040a 	subs.w	r4, r2, sl
 8002228:	eb63 050b 	sbc.w	r5, r3, fp
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	00eb      	lsls	r3, r5, #3
 8002236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800223a:	00e2      	lsls	r2, r4, #3
 800223c:	4614      	mov	r4, r2
 800223e:	461d      	mov	r5, r3
 8002240:	4643      	mov	r3, r8
 8002242:	18e3      	adds	r3, r4, r3
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	464b      	mov	r3, r9
 8002248:	eb45 0303 	adc.w	r3, r5, r3
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800225a:	4629      	mov	r1, r5
 800225c:	028b      	lsls	r3, r1, #10
 800225e:	4621      	mov	r1, r4
 8002260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002264:	4621      	mov	r1, r4
 8002266:	028a      	lsls	r2, r1, #10
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800226e:	2200      	movs	r2, #0
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	61fa      	str	r2, [r7, #28]
 8002274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002278:	f7fe f802 	bl	8000280 <__aeabi_uldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4613      	mov	r3, r2
 8002282:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	3301      	adds	r3, #1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002294:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800229e:	e002      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3750      	adds	r7, #80	@ 0x50
 80022ac:	46bd      	mov	sp, r7
 80022ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	00f42400 	.word	0x00f42400
 80022bc:	007a1200 	.word	0x007a1200

080022c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	200001e4 	.word	0x200001e4

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022dc:	f7ff fff0 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0a9b      	lsrs	r3, r3, #10
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4903      	ldr	r1, [pc, #12]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	080049a8 	.word	0x080049a8

08002300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002304:	f7ff ffdc 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	0b5b      	lsrs	r3, r3, #13
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4903      	ldr	r1, [pc, #12]	@ (8002324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	080049a8 	.word	0x080049a8

08002328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e041      	b.n	80023be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fddc 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3304      	adds	r3, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4610      	mov	r0, r2
 8002368:	f000 fb24 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e041      	b.n	800245c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f839 	bl	8002464 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f000 fad5 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_TIM_PWM_Start+0x24>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e022      	b.n	80024e2 <HAL_TIM_PWM_Start+0x6a>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d109      	bne.n	80024b6 <HAL_TIM_PWM_Start+0x3e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	bf14      	ite	ne
 80024ae:	2301      	movne	r3, #1
 80024b0:	2300      	moveq	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	e015      	b.n	80024e2 <HAL_TIM_PWM_Start+0x6a>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d109      	bne.n	80024d0 <HAL_TIM_PWM_Start+0x58>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e008      	b.n	80024e2 <HAL_TIM_PWM_Start+0x6a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	bf14      	ite	ne
 80024dc:	2301      	movne	r3, #1
 80024de:	2300      	moveq	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e068      	b.n	80025bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d104      	bne.n	80024fa <HAL_TIM_PWM_Start+0x82>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024f8:	e013      	b.n	8002522 <HAL_TIM_PWM_Start+0xaa>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d104      	bne.n	800250a <HAL_TIM_PWM_Start+0x92>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002508:	e00b      	b.n	8002522 <HAL_TIM_PWM_Start+0xaa>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b08      	cmp	r3, #8
 800250e:	d104      	bne.n	800251a <HAL_TIM_PWM_Start+0xa2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002518:	e003      	b.n	8002522 <HAL_TIM_PWM_Start+0xaa>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2202      	movs	r2, #2
 800251e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2201      	movs	r2, #1
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fcf4 	bl	8002f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a23      	ldr	r2, [pc, #140]	@ (80025c4 <HAL_TIM_PWM_Start+0x14c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d107      	bne.n	800254a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <HAL_TIM_PWM_Start+0x14c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d018      	beq.n	8002586 <HAL_TIM_PWM_Start+0x10e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800255c:	d013      	beq.n	8002586 <HAL_TIM_PWM_Start+0x10e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <HAL_TIM_PWM_Start+0x150>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00e      	beq.n	8002586 <HAL_TIM_PWM_Start+0x10e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <HAL_TIM_PWM_Start+0x154>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_TIM_PWM_Start+0x10e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a16      	ldr	r2, [pc, #88]	@ (80025d0 <HAL_TIM_PWM_Start+0x158>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d004      	beq.n	8002586 <HAL_TIM_PWM_Start+0x10e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a14      	ldr	r2, [pc, #80]	@ (80025d4 <HAL_TIM_PWM_Start+0x15c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d111      	bne.n	80025aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b06      	cmp	r3, #6
 8002596:	d010      	beq.n	80025ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a8:	e007      	b.n	80025ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40014000 	.word	0x40014000

080025d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	6839      	ldr	r1, [r7, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fc94 	bl	8002f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a29      	ldr	r2, [pc, #164]	@ (800269c <HAL_TIM_PWM_Stop+0xc4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d117      	bne.n	800262a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a1a      	ldr	r2, [r3, #32]
 8002600:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_TIM_PWM_Stop+0x52>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	f240 4344 	movw	r3, #1092	@ 0x444
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d107      	bne.n	800262a <HAL_TIM_PWM_Stop+0x52>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002628:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a1a      	ldr	r2, [r3, #32]
 8002630:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <HAL_TIM_PWM_Stop+0x82>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	f240 4344 	movw	r3, #1092	@ 0x444
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d107      	bne.n	800265a <HAL_TIM_PWM_Stop+0x82>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <HAL_TIM_PWM_Stop+0x92>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002668:	e013      	b.n	8002692 <HAL_TIM_PWM_Stop+0xba>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d104      	bne.n	800267a <HAL_TIM_PWM_Stop+0xa2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002678:	e00b      	b.n	8002692 <HAL_TIM_PWM_Stop+0xba>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d104      	bne.n	800268a <HAL_TIM_PWM_Stop+0xb2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002688:	e003      	b.n	8002692 <HAL_TIM_PWM_Stop+0xba>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40010000 	.word	0x40010000

080026a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0ae      	b.n	800281c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	f200 809f 	bhi.w	800280c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026ce:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	08002709 	.word	0x08002709
 80026d8:	0800280d 	.word	0x0800280d
 80026dc:	0800280d 	.word	0x0800280d
 80026e0:	0800280d 	.word	0x0800280d
 80026e4:	08002749 	.word	0x08002749
 80026e8:	0800280d 	.word	0x0800280d
 80026ec:	0800280d 	.word	0x0800280d
 80026f0:	0800280d 	.word	0x0800280d
 80026f4:	0800278b 	.word	0x0800278b
 80026f8:	0800280d 	.word	0x0800280d
 80026fc:	0800280d 	.word	0x0800280d
 8002700:	0800280d 	.word	0x0800280d
 8002704:	080027cb 	.word	0x080027cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f9dc 	bl	8002acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0208 	orr.w	r2, r2, #8
 8002722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0204 	bic.w	r2, r2, #4
 8002732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6999      	ldr	r1, [r3, #24]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	619a      	str	r2, [r3, #24]
      break;
 8002746:	e064      	b.n	8002812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fa22 	bl	8002b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6999      	ldr	r1, [r3, #24]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	021a      	lsls	r2, r3, #8
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	619a      	str	r2, [r3, #24]
      break;
 8002788:	e043      	b.n	8002812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fa6d 	bl	8002c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0208 	orr.w	r2, r2, #8
 80027a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0204 	bic.w	r2, r2, #4
 80027b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69d9      	ldr	r1, [r3, #28]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	61da      	str	r2, [r3, #28]
      break;
 80027c8:	e023      	b.n	8002812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fab7 	bl	8002d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69d9      	ldr	r1, [r3, #28]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	021a      	lsls	r2, r3, #8
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	61da      	str	r2, [r3, #28]
      break;
 800280a:	e002      	b.n	8002812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	75fb      	strb	r3, [r7, #23]
      break;
 8002810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_TIM_ConfigClockSource+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e0b4      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x186>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800285e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002878:	d03e      	beq.n	80028f8 <HAL_TIM_ConfigClockSource+0xd4>
 800287a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800287e:	f200 8087 	bhi.w	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002886:	f000 8086 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x172>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800288e:	d87f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b70      	cmp	r3, #112	@ 0x70
 8002892:	d01a      	beq.n	80028ca <HAL_TIM_ConfigClockSource+0xa6>
 8002894:	2b70      	cmp	r3, #112	@ 0x70
 8002896:	d87b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b60      	cmp	r3, #96	@ 0x60
 800289a:	d050      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x11a>
 800289c:	2b60      	cmp	r3, #96	@ 0x60
 800289e:	d877      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b50      	cmp	r3, #80	@ 0x50
 80028a2:	d03c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xfa>
 80028a4:	2b50      	cmp	r3, #80	@ 0x50
 80028a6:	d873      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b40      	cmp	r3, #64	@ 0x40
 80028aa:	d058      	beq.n	800295e <HAL_TIM_ConfigClockSource+0x13a>
 80028ac:	2b40      	cmp	r3, #64	@ 0x40
 80028ae:	d86f      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b30      	cmp	r3, #48	@ 0x30
 80028b2:	d064      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028b4:	2b30      	cmp	r3, #48	@ 0x30
 80028b6:	d86b      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d060      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d867      	bhi.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05c      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d05a      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x15a>
 80028c8:	e062      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028da:	f000 fafd 	bl	8002ed8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	609a      	str	r2, [r3, #8]
      break;
 80028f6:	e04f      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002908:	f000 fae6 	bl	8002ed8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800291a:	609a      	str	r2, [r3, #8]
      break;
 800291c:	e03c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	461a      	mov	r2, r3
 800292c:	f000 fa5a 	bl	8002de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2150      	movs	r1, #80	@ 0x50
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fab3 	bl	8002ea2 <TIM_ITRx_SetConfig>
      break;
 800293c:	e02c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800294a:	461a      	mov	r2, r3
 800294c:	f000 fa79 	bl	8002e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2160      	movs	r1, #96	@ 0x60
 8002956:	4618      	mov	r0, r3
 8002958:	f000 faa3 	bl	8002ea2 <TIM_ITRx_SetConfig>
      break;
 800295c:	e01c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800296a:	461a      	mov	r2, r3
 800296c:	f000 fa3a 	bl	8002de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2140      	movs	r1, #64	@ 0x40
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fa93 	bl	8002ea2 <TIM_ITRx_SetConfig>
      break;
 800297c:	e00c      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 fa8a 	bl	8002ea2 <TIM_ITRx_SetConfig>
      break;
 800298e:	e003      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      break;
 8002994:	e000      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab0 <TIM_Base_SetConfig+0xfc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00f      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d2:	d00b      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a37      	ldr	r2, [pc, #220]	@ (8002ab4 <TIM_Base_SetConfig+0x100>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a36      	ldr	r2, [pc, #216]	@ (8002ab8 <TIM_Base_SetConfig+0x104>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d003      	beq.n	80029ec <TIM_Base_SetConfig+0x38>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a35      	ldr	r2, [pc, #212]	@ (8002abc <TIM_Base_SetConfig+0x108>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d108      	bne.n	80029fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab0 <TIM_Base_SetConfig+0xfc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01b      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a0c:	d017      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a28      	ldr	r2, [pc, #160]	@ (8002ab4 <TIM_Base_SetConfig+0x100>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a27      	ldr	r2, [pc, #156]	@ (8002ab8 <TIM_Base_SetConfig+0x104>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00f      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a26      	ldr	r2, [pc, #152]	@ (8002abc <TIM_Base_SetConfig+0x108>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	@ (8002ac0 <TIM_Base_SetConfig+0x10c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a24      	ldr	r2, [pc, #144]	@ (8002ac4 <TIM_Base_SetConfig+0x110>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a23      	ldr	r2, [pc, #140]	@ (8002ac8 <TIM_Base_SetConfig+0x114>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab0 <TIM_Base_SetConfig+0xfc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d105      	bne.n	8002aa2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f023 0201 	bic.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	611a      	str	r2, [r3, #16]
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40000800 	.word	0x40000800
 8002abc:	40000c00 	.word	0x40000c00
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800

08002acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f023 0201 	bic.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f023 0302 	bic.w	r3, r3, #2
 8002b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <TIM_OC1_SetConfig+0xc8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10c      	bne.n	8002b42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f023 0308 	bic.w	r3, r3, #8
 8002b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a13      	ldr	r2, [pc, #76]	@ (8002b94 <TIM_OC1_SetConfig+0xc8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d111      	bne.n	8002b6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	621a      	str	r2, [r3, #32]
}
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40010000 	.word	0x40010000

08002b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f023 0210 	bic.w	r2, r3, #16
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0320 	bic.w	r3, r3, #32
 8002be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c6c <TIM_OC2_SetConfig+0xd4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d10d      	bne.n	8002c14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a15      	ldr	r2, [pc, #84]	@ (8002c6c <TIM_OC2_SetConfig+0xd4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d113      	bne.n	8002c44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	621a      	str	r2, [r3, #32]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40010000 	.word	0x40010000

08002c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0303 	bic.w	r3, r3, #3
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d40 <TIM_OC3_SetConfig+0xd0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10d      	bne.n	8002cea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <TIM_OC3_SetConfig+0xd0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d113      	bne.n	8002d1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	621a      	str	r2, [r3, #32]
}
 8002d34:	bf00      	nop
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	40010000 	.word	0x40010000

08002d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	031b      	lsls	r3, r3, #12
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a10      	ldr	r2, [pc, #64]	@ (8002de0 <TIM_OC4_SetConfig+0x9c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d109      	bne.n	8002db8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40010000 	.word	0x40010000

08002de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f023 0201 	bic.w	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f023 030a 	bic.w	r3, r3, #10
 8002e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f023 0210 	bic.w	r2, r3, #16
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	031b      	lsls	r3, r3, #12
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	621a      	str	r2, [r3, #32]
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f043 0307 	orr.w	r3, r3, #7
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	021a      	lsls	r2, r3, #8
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	609a      	str	r2, [r3, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	621a      	str	r2, [r3, #32]
}
 8002f56:	bf00      	nop
 8002f58:	371c      	adds	r7, #28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e050      	b.n	800301e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	@ (800302c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d018      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc8:	d013      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a16      	ldr	r2, [pc, #88]	@ (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d009      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	@ (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a13      	ldr	r2, [pc, #76]	@ (800303c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10c      	bne.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4313      	orrs	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40010000 	.word	0x40010000
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800
 8003038:	40000c00 	.word	0x40000c00
 800303c:	40014000 	.word	0x40014000

08003040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e042      	b.n	80030d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd ffbe 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	@ 0x24
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa09 	bl	800349c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	@ 0x28
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d175      	bne.n	80031ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Transmit+0x2c>
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e06e      	b.n	80031ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2221      	movs	r2, #33	@ 0x21
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800311e:	f7fe f95b 	bl	80013d8 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	88fa      	ldrh	r2, [r7, #6]
 800312e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003138:	d108      	bne.n	800314c <HAL_UART_Transmit+0x6c>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d104      	bne.n	800314c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	e003      	b.n	8003154 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003154:	e02e      	b.n	80031b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	2180      	movs	r1, #128	@ 0x80
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f8df 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e03a      	b.n	80031ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800318c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	3302      	adds	r3, #2
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	e007      	b.n	80031a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3301      	adds	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1cb      	bne.n	8003156 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2140      	movs	r1, #64	@ 0x40
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f8ab 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e006      	b.n	80031ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b08a      	sub	sp, #40	@ 0x28
 80031fa:	af02      	add	r7, sp, #8
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	f040 8081 	bne.w	800331a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_UART_Receive+0x2e>
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e079      	b.n	800331c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2222      	movs	r2, #34	@ 0x22
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800323c:	f7fe f8cc 	bl	80013d8 <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003256:	d108      	bne.n	800326a <HAL_UART_Receive+0x74>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e003      	b.n	8003272 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003272:	e047      	b.n	8003304 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2200      	movs	r2, #0
 800327c:	2120      	movs	r1, #32
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f850 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e042      	b.n	800331c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10c      	bne.n	80032b6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	3302      	adds	r3, #2
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	e01f      	b.n	80032f6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032be:	d007      	beq.n	80032d0 <HAL_UART_Receive+0xda>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_UART_Receive+0xe8>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e008      	b.n	80032f0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	3301      	adds	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1b2      	bne.n	8003274 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003334:	e03b      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800333c:	d037      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe f84b 	bl	80013d8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <UART_WaitOnFlagUntilTimeout+0x30>
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e03a      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d023      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b80      	cmp	r3, #128	@ 0x80
 800336a:	d020      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b40      	cmp	r3, #64	@ 0x40
 8003370:	d01d      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b08      	cmp	r3, #8
 800337e:	d116      	bne.n	80033ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f81d 	bl	80033d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2208      	movs	r2, #8
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e00f      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d0b4      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b095      	sub	sp, #84	@ 0x54
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8003400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003404:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800340c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e5      	bne.n	80033de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3314      	adds	r3, #20
 8003418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	61fb      	str	r3, [r7, #28]
   return(result);
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	64bb      	str	r3, [r7, #72]	@ 0x48
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3314      	adds	r3, #20
 8003430:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003432:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e5      	bne.n	8003412 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	2b01      	cmp	r3, #1
 800344c:	d119      	bne.n	8003482 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	60bb      	str	r3, [r7, #8]
   return(result);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f023 0310 	bic.w	r3, r3, #16
 8003464:	647b      	str	r3, [r7, #68]	@ 0x44
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	330c      	adds	r3, #12
 800346c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800346e:	61ba      	str	r2, [r7, #24]
 8003470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6979      	ldr	r1, [r7, #20]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	613b      	str	r3, [r7, #16]
   return(result);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e5      	bne.n	800344e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003490:	bf00      	nop
 8003492:	3754      	adds	r7, #84	@ 0x54
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800349c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a0:	b0c0      	sub	sp, #256	@ 0x100
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b8:	68d9      	ldr	r1, [r3, #12]
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	ea40 0301 	orr.w	r3, r0, r1
 80034c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	431a      	orrs	r2, r3
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034f4:	f021 010c 	bic.w	r1, r1, #12
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003502:	430b      	orrs	r3, r1
 8003504:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	6999      	ldr	r1, [r3, #24]
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	ea40 0301 	orr.w	r3, r0, r1
 8003522:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b8f      	ldr	r3, [pc, #572]	@ (8003768 <UART_SetConfig+0x2cc>)
 800352c:	429a      	cmp	r2, r3
 800352e:	d005      	beq.n	800353c <UART_SetConfig+0xa0>
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b8d      	ldr	r3, [pc, #564]	@ (800376c <UART_SetConfig+0x2d0>)
 8003538:	429a      	cmp	r2, r3
 800353a:	d104      	bne.n	8003546 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800353c:	f7fe fee0 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 8003540:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003544:	e003      	b.n	800354e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003546:	f7fe fec7 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 800354a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800354e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003558:	f040 810c 	bne.w	8003774 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800355c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003560:	2200      	movs	r2, #0
 8003562:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003566:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800356a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800356e:	4622      	mov	r2, r4
 8003570:	462b      	mov	r3, r5
 8003572:	1891      	adds	r1, r2, r2
 8003574:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003576:	415b      	adcs	r3, r3
 8003578:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800357a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800357e:	4621      	mov	r1, r4
 8003580:	eb12 0801 	adds.w	r8, r2, r1
 8003584:	4629      	mov	r1, r5
 8003586:	eb43 0901 	adc.w	r9, r3, r1
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800359a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800359e:	4690      	mov	r8, r2
 80035a0:	4699      	mov	r9, r3
 80035a2:	4623      	mov	r3, r4
 80035a4:	eb18 0303 	adds.w	r3, r8, r3
 80035a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035ac:	462b      	mov	r3, r5
 80035ae:	eb49 0303 	adc.w	r3, r9, r3
 80035b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035ca:	460b      	mov	r3, r1
 80035cc:	18db      	adds	r3, r3, r3
 80035ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80035d0:	4613      	mov	r3, r2
 80035d2:	eb42 0303 	adc.w	r3, r2, r3
 80035d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80035d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035e0:	f7fc fe4e 	bl	8000280 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4b61      	ldr	r3, [pc, #388]	@ (8003770 <UART_SetConfig+0x2d4>)
 80035ea:	fba3 2302 	umull	r2, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	011c      	lsls	r4, r3, #4
 80035f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003600:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	1891      	adds	r1, r2, r2
 800360a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800360c:	415b      	adcs	r3, r3
 800360e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003610:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003614:	4641      	mov	r1, r8
 8003616:	eb12 0a01 	adds.w	sl, r2, r1
 800361a:	4649      	mov	r1, r9
 800361c:	eb43 0b01 	adc.w	fp, r3, r1
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800362c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003634:	4692      	mov	sl, r2
 8003636:	469b      	mov	fp, r3
 8003638:	4643      	mov	r3, r8
 800363a:	eb1a 0303 	adds.w	r3, sl, r3
 800363e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003642:	464b      	mov	r3, r9
 8003644:	eb4b 0303 	adc.w	r3, fp, r3
 8003648:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003658:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800365c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003660:	460b      	mov	r3, r1
 8003662:	18db      	adds	r3, r3, r3
 8003664:	643b      	str	r3, [r7, #64]	@ 0x40
 8003666:	4613      	mov	r3, r2
 8003668:	eb42 0303 	adc.w	r3, r2, r3
 800366c:	647b      	str	r3, [r7, #68]	@ 0x44
 800366e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003672:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003676:	f7fc fe03 	bl	8000280 <__aeabi_uldivmod>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4611      	mov	r1, r2
 8003680:	4b3b      	ldr	r3, [pc, #236]	@ (8003770 <UART_SetConfig+0x2d4>)
 8003682:	fba3 2301 	umull	r2, r3, r3, r1
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2264      	movs	r2, #100	@ 0x64
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	1acb      	subs	r3, r1, r3
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003696:	4b36      	ldr	r3, [pc, #216]	@ (8003770 <UART_SetConfig+0x2d4>)
 8003698:	fba3 2302 	umull	r2, r3, r3, r2
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036a4:	441c      	add	r4, r3
 80036a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	1891      	adds	r1, r2, r2
 80036be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036c0:	415b      	adcs	r3, r3
 80036c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036c8:	4641      	mov	r1, r8
 80036ca:	1851      	adds	r1, r2, r1
 80036cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80036ce:	4649      	mov	r1, r9
 80036d0:	414b      	adcs	r3, r1
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036e0:	4659      	mov	r1, fp
 80036e2:	00cb      	lsls	r3, r1, #3
 80036e4:	4651      	mov	r1, sl
 80036e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ea:	4651      	mov	r1, sl
 80036ec:	00ca      	lsls	r2, r1, #3
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	4642      	mov	r2, r8
 80036f6:	189b      	adds	r3, r3, r2
 80036f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036fc:	464b      	mov	r3, r9
 80036fe:	460a      	mov	r2, r1
 8003700:	eb42 0303 	adc.w	r3, r2, r3
 8003704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003714:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003718:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800371c:	460b      	mov	r3, r1
 800371e:	18db      	adds	r3, r3, r3
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003722:	4613      	mov	r3, r2
 8003724:	eb42 0303 	adc.w	r3, r2, r3
 8003728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800372a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800372e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003732:	f7fc fda5 	bl	8000280 <__aeabi_uldivmod>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4b0d      	ldr	r3, [pc, #52]	@ (8003770 <UART_SetConfig+0x2d4>)
 800373c:	fba3 1302 	umull	r1, r3, r3, r2
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	2164      	movs	r1, #100	@ 0x64
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	3332      	adds	r3, #50	@ 0x32
 800374e:	4a08      	ldr	r2, [pc, #32]	@ (8003770 <UART_SetConfig+0x2d4>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	f003 0207 	and.w	r2, r3, #7
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4422      	add	r2, r4
 8003762:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003764:	e106      	b.n	8003974 <UART_SetConfig+0x4d8>
 8003766:	bf00      	nop
 8003768:	40011000 	.word	0x40011000
 800376c:	40011400 	.word	0x40011400
 8003770:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003778:	2200      	movs	r2, #0
 800377a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800377e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003782:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003786:	4642      	mov	r2, r8
 8003788:	464b      	mov	r3, r9
 800378a:	1891      	adds	r1, r2, r2
 800378c:	6239      	str	r1, [r7, #32]
 800378e:	415b      	adcs	r3, r3
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
 8003792:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003796:	4641      	mov	r1, r8
 8003798:	1854      	adds	r4, r2, r1
 800379a:	4649      	mov	r1, r9
 800379c:	eb43 0501 	adc.w	r5, r3, r1
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	00eb      	lsls	r3, r5, #3
 80037aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ae:	00e2      	lsls	r2, r4, #3
 80037b0:	4614      	mov	r4, r2
 80037b2:	461d      	mov	r5, r3
 80037b4:	4643      	mov	r3, r8
 80037b6:	18e3      	adds	r3, r4, r3
 80037b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037bc:	464b      	mov	r3, r9
 80037be:	eb45 0303 	adc.w	r3, r5, r3
 80037c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037e2:	4629      	mov	r1, r5
 80037e4:	008b      	lsls	r3, r1, #2
 80037e6:	4621      	mov	r1, r4
 80037e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ec:	4621      	mov	r1, r4
 80037ee:	008a      	lsls	r2, r1, #2
 80037f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037f4:	f7fc fd44 	bl	8000280 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4b60      	ldr	r3, [pc, #384]	@ (8003980 <UART_SetConfig+0x4e4>)
 80037fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	011c      	lsls	r4, r3, #4
 8003806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380a:	2200      	movs	r2, #0
 800380c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003810:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003814:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003818:	4642      	mov	r2, r8
 800381a:	464b      	mov	r3, r9
 800381c:	1891      	adds	r1, r2, r2
 800381e:	61b9      	str	r1, [r7, #24]
 8003820:	415b      	adcs	r3, r3
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003828:	4641      	mov	r1, r8
 800382a:	1851      	adds	r1, r2, r1
 800382c:	6139      	str	r1, [r7, #16]
 800382e:	4649      	mov	r1, r9
 8003830:	414b      	adcs	r3, r1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003840:	4659      	mov	r1, fp
 8003842:	00cb      	lsls	r3, r1, #3
 8003844:	4651      	mov	r1, sl
 8003846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800384a:	4651      	mov	r1, sl
 800384c:	00ca      	lsls	r2, r1, #3
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	4603      	mov	r3, r0
 8003854:	4642      	mov	r2, r8
 8003856:	189b      	adds	r3, r3, r2
 8003858:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800385c:	464b      	mov	r3, r9
 800385e:	460a      	mov	r2, r1
 8003860:	eb42 0303 	adc.w	r3, r2, r3
 8003864:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003872:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003880:	4649      	mov	r1, r9
 8003882:	008b      	lsls	r3, r1, #2
 8003884:	4641      	mov	r1, r8
 8003886:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800388a:	4641      	mov	r1, r8
 800388c:	008a      	lsls	r2, r1, #2
 800388e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003892:	f7fc fcf5 	bl	8000280 <__aeabi_uldivmod>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4611      	mov	r1, r2
 800389c:	4b38      	ldr	r3, [pc, #224]	@ (8003980 <UART_SetConfig+0x4e4>)
 800389e:	fba3 2301 	umull	r2, r3, r3, r1
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2264      	movs	r2, #100	@ 0x64
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	1acb      	subs	r3, r1, r3
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	3332      	adds	r3, #50	@ 0x32
 80038b0:	4a33      	ldr	r2, [pc, #204]	@ (8003980 <UART_SetConfig+0x4e4>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038bc:	441c      	add	r4, r3
 80038be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c2:	2200      	movs	r2, #0
 80038c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80038c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80038c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038cc:	4642      	mov	r2, r8
 80038ce:	464b      	mov	r3, r9
 80038d0:	1891      	adds	r1, r2, r2
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	415b      	adcs	r3, r3
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038dc:	4641      	mov	r1, r8
 80038de:	1851      	adds	r1, r2, r1
 80038e0:	6039      	str	r1, [r7, #0]
 80038e2:	4649      	mov	r1, r9
 80038e4:	414b      	adcs	r3, r1
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038f4:	4659      	mov	r1, fp
 80038f6:	00cb      	lsls	r3, r1, #3
 80038f8:	4651      	mov	r1, sl
 80038fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fe:	4651      	mov	r1, sl
 8003900:	00ca      	lsls	r2, r1, #3
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	4603      	mov	r3, r0
 8003908:	4642      	mov	r2, r8
 800390a:	189b      	adds	r3, r3, r2
 800390c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800390e:	464b      	mov	r3, r9
 8003910:	460a      	mov	r2, r1
 8003912:	eb42 0303 	adc.w	r3, r2, r3
 8003916:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	663b      	str	r3, [r7, #96]	@ 0x60
 8003922:	667a      	str	r2, [r7, #100]	@ 0x64
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003930:	4649      	mov	r1, r9
 8003932:	008b      	lsls	r3, r1, #2
 8003934:	4641      	mov	r1, r8
 8003936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800393a:	4641      	mov	r1, r8
 800393c:	008a      	lsls	r2, r1, #2
 800393e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003942:	f7fc fc9d 	bl	8000280 <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <UART_SetConfig+0x4e4>)
 800394c:	fba3 1302 	umull	r1, r3, r3, r2
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2164      	movs	r1, #100	@ 0x64
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	3332      	adds	r3, #50	@ 0x32
 800395e:	4a08      	ldr	r2, [pc, #32]	@ (8003980 <UART_SetConfig+0x4e4>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	f003 020f 	and.w	r2, r3, #15
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4422      	add	r2, r4
 8003972:	609a      	str	r2, [r3, #8]
}
 8003974:	bf00      	nop
 8003976:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800397a:	46bd      	mov	sp, r7
 800397c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003980:	51eb851f 	.word	0x51eb851f

08003984 <std>:
 8003984:	2300      	movs	r3, #0
 8003986:	b510      	push	{r4, lr}
 8003988:	4604      	mov	r4, r0
 800398a:	e9c0 3300 	strd	r3, r3, [r0]
 800398e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003992:	6083      	str	r3, [r0, #8]
 8003994:	8181      	strh	r1, [r0, #12]
 8003996:	6643      	str	r3, [r0, #100]	@ 0x64
 8003998:	81c2      	strh	r2, [r0, #14]
 800399a:	6183      	str	r3, [r0, #24]
 800399c:	4619      	mov	r1, r3
 800399e:	2208      	movs	r2, #8
 80039a0:	305c      	adds	r0, #92	@ 0x5c
 80039a2:	f000 f921 	bl	8003be8 <memset>
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <std+0x58>)
 80039a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80039aa:	4b0d      	ldr	r3, [pc, #52]	@ (80039e0 <std+0x5c>)
 80039ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80039ae:	4b0d      	ldr	r3, [pc, #52]	@ (80039e4 <std+0x60>)
 80039b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80039b2:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <std+0x64>)
 80039b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80039b6:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <std+0x68>)
 80039b8:	6224      	str	r4, [r4, #32]
 80039ba:	429c      	cmp	r4, r3
 80039bc:	d006      	beq.n	80039cc <std+0x48>
 80039be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80039c2:	4294      	cmp	r4, r2
 80039c4:	d002      	beq.n	80039cc <std+0x48>
 80039c6:	33d0      	adds	r3, #208	@ 0xd0
 80039c8:	429c      	cmp	r4, r3
 80039ca:	d105      	bne.n	80039d8 <std+0x54>
 80039cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80039d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039d4:	f000 b93a 	b.w	8003c4c <__retarget_lock_init_recursive>
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	bf00      	nop
 80039dc:	080044a5 	.word	0x080044a5
 80039e0:	080044c7 	.word	0x080044c7
 80039e4:	080044ff 	.word	0x080044ff
 80039e8:	08004523 	.word	0x08004523
 80039ec:	200003a0 	.word	0x200003a0

080039f0 <stdio_exit_handler>:
 80039f0:	4a02      	ldr	r2, [pc, #8]	@ (80039fc <stdio_exit_handler+0xc>)
 80039f2:	4903      	ldr	r1, [pc, #12]	@ (8003a00 <stdio_exit_handler+0x10>)
 80039f4:	4803      	ldr	r0, [pc, #12]	@ (8003a04 <stdio_exit_handler+0x14>)
 80039f6:	f000 b869 	b.w	8003acc <_fwalk_sglue>
 80039fa:	bf00      	nop
 80039fc:	200001f0 	.word	0x200001f0
 8003a00:	0800443d 	.word	0x0800443d
 8003a04:	20000200 	.word	0x20000200

08003a08 <cleanup_stdio>:
 8003a08:	6841      	ldr	r1, [r0, #4]
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <cleanup_stdio+0x34>)
 8003a0c:	4299      	cmp	r1, r3
 8003a0e:	b510      	push	{r4, lr}
 8003a10:	4604      	mov	r4, r0
 8003a12:	d001      	beq.n	8003a18 <cleanup_stdio+0x10>
 8003a14:	f000 fd12 	bl	800443c <_fflush_r>
 8003a18:	68a1      	ldr	r1, [r4, #8]
 8003a1a:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <cleanup_stdio+0x38>)
 8003a1c:	4299      	cmp	r1, r3
 8003a1e:	d002      	beq.n	8003a26 <cleanup_stdio+0x1e>
 8003a20:	4620      	mov	r0, r4
 8003a22:	f000 fd0b 	bl	800443c <_fflush_r>
 8003a26:	68e1      	ldr	r1, [r4, #12]
 8003a28:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <cleanup_stdio+0x3c>)
 8003a2a:	4299      	cmp	r1, r3
 8003a2c:	d004      	beq.n	8003a38 <cleanup_stdio+0x30>
 8003a2e:	4620      	mov	r0, r4
 8003a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a34:	f000 bd02 	b.w	800443c <_fflush_r>
 8003a38:	bd10      	pop	{r4, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200003a0 	.word	0x200003a0
 8003a40:	20000408 	.word	0x20000408
 8003a44:	20000470 	.word	0x20000470

08003a48 <global_stdio_init.part.0>:
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <global_stdio_init.part.0+0x30>)
 8003a4c:	4c0b      	ldr	r4, [pc, #44]	@ (8003a7c <global_stdio_init.part.0+0x34>)
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a80 <global_stdio_init.part.0+0x38>)
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	4620      	mov	r0, r4
 8003a54:	2200      	movs	r2, #0
 8003a56:	2104      	movs	r1, #4
 8003a58:	f7ff ff94 	bl	8003984 <std>
 8003a5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a60:	2201      	movs	r2, #1
 8003a62:	2109      	movs	r1, #9
 8003a64:	f7ff ff8e 	bl	8003984 <std>
 8003a68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a72:	2112      	movs	r1, #18
 8003a74:	f7ff bf86 	b.w	8003984 <std>
 8003a78:	200004d8 	.word	0x200004d8
 8003a7c:	200003a0 	.word	0x200003a0
 8003a80:	080039f1 	.word	0x080039f1

08003a84 <__sfp_lock_acquire>:
 8003a84:	4801      	ldr	r0, [pc, #4]	@ (8003a8c <__sfp_lock_acquire+0x8>)
 8003a86:	f000 b8e2 	b.w	8003c4e <__retarget_lock_acquire_recursive>
 8003a8a:	bf00      	nop
 8003a8c:	200004dd 	.word	0x200004dd

08003a90 <__sfp_lock_release>:
 8003a90:	4801      	ldr	r0, [pc, #4]	@ (8003a98 <__sfp_lock_release+0x8>)
 8003a92:	f000 b8dd 	b.w	8003c50 <__retarget_lock_release_recursive>
 8003a96:	bf00      	nop
 8003a98:	200004dd 	.word	0x200004dd

08003a9c <__sinit>:
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	f7ff fff0 	bl	8003a84 <__sfp_lock_acquire>
 8003aa4:	6a23      	ldr	r3, [r4, #32]
 8003aa6:	b11b      	cbz	r3, 8003ab0 <__sinit+0x14>
 8003aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aac:	f7ff bff0 	b.w	8003a90 <__sfp_lock_release>
 8003ab0:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <__sinit+0x28>)
 8003ab2:	6223      	str	r3, [r4, #32]
 8003ab4:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <__sinit+0x2c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f5      	bne.n	8003aa8 <__sinit+0xc>
 8003abc:	f7ff ffc4 	bl	8003a48 <global_stdio_init.part.0>
 8003ac0:	e7f2      	b.n	8003aa8 <__sinit+0xc>
 8003ac2:	bf00      	nop
 8003ac4:	08003a09 	.word	0x08003a09
 8003ac8:	200004d8 	.word	0x200004d8

08003acc <_fwalk_sglue>:
 8003acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ad0:	4607      	mov	r7, r0
 8003ad2:	4688      	mov	r8, r1
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	2600      	movs	r6, #0
 8003ad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003adc:	f1b9 0901 	subs.w	r9, r9, #1
 8003ae0:	d505      	bpl.n	8003aee <_fwalk_sglue+0x22>
 8003ae2:	6824      	ldr	r4, [r4, #0]
 8003ae4:	2c00      	cmp	r4, #0
 8003ae6:	d1f7      	bne.n	8003ad8 <_fwalk_sglue+0xc>
 8003ae8:	4630      	mov	r0, r6
 8003aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aee:	89ab      	ldrh	r3, [r5, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d907      	bls.n	8003b04 <_fwalk_sglue+0x38>
 8003af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003af8:	3301      	adds	r3, #1
 8003afa:	d003      	beq.n	8003b04 <_fwalk_sglue+0x38>
 8003afc:	4629      	mov	r1, r5
 8003afe:	4638      	mov	r0, r7
 8003b00:	47c0      	blx	r8
 8003b02:	4306      	orrs	r6, r0
 8003b04:	3568      	adds	r5, #104	@ 0x68
 8003b06:	e7e9      	b.n	8003adc <_fwalk_sglue+0x10>

08003b08 <iprintf>:
 8003b08:	b40f      	push	{r0, r1, r2, r3}
 8003b0a:	b507      	push	{r0, r1, r2, lr}
 8003b0c:	4906      	ldr	r1, [pc, #24]	@ (8003b28 <iprintf+0x20>)
 8003b0e:	ab04      	add	r3, sp, #16
 8003b10:	6808      	ldr	r0, [r1, #0]
 8003b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b16:	6881      	ldr	r1, [r0, #8]
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	f000 f8c3 	bl	8003ca4 <_vfiprintf_r>
 8003b1e:	b003      	add	sp, #12
 8003b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b24:	b004      	add	sp, #16
 8003b26:	4770      	bx	lr
 8003b28:	200001fc 	.word	0x200001fc

08003b2c <_puts_r>:
 8003b2c:	6a03      	ldr	r3, [r0, #32]
 8003b2e:	b570      	push	{r4, r5, r6, lr}
 8003b30:	6884      	ldr	r4, [r0, #8]
 8003b32:	4605      	mov	r5, r0
 8003b34:	460e      	mov	r6, r1
 8003b36:	b90b      	cbnz	r3, 8003b3c <_puts_r+0x10>
 8003b38:	f7ff ffb0 	bl	8003a9c <__sinit>
 8003b3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b3e:	07db      	lsls	r3, r3, #31
 8003b40:	d405      	bmi.n	8003b4e <_puts_r+0x22>
 8003b42:	89a3      	ldrh	r3, [r4, #12]
 8003b44:	0598      	lsls	r0, r3, #22
 8003b46:	d402      	bmi.n	8003b4e <_puts_r+0x22>
 8003b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b4a:	f000 f880 	bl	8003c4e <__retarget_lock_acquire_recursive>
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	0719      	lsls	r1, r3, #28
 8003b52:	d502      	bpl.n	8003b5a <_puts_r+0x2e>
 8003b54:	6923      	ldr	r3, [r4, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d135      	bne.n	8003bc6 <_puts_r+0x9a>
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 fd23 	bl	80045a8 <__swsetup_r>
 8003b62:	b380      	cbz	r0, 8003bc6 <_puts_r+0x9a>
 8003b64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b6a:	07da      	lsls	r2, r3, #31
 8003b6c:	d405      	bmi.n	8003b7a <_puts_r+0x4e>
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	059b      	lsls	r3, r3, #22
 8003b72:	d402      	bmi.n	8003b7a <_puts_r+0x4e>
 8003b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b76:	f000 f86b 	bl	8003c50 <__retarget_lock_release_recursive>
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	bd70      	pop	{r4, r5, r6, pc}
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da04      	bge.n	8003b8c <_puts_r+0x60>
 8003b82:	69a2      	ldr	r2, [r4, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	dc17      	bgt.n	8003bb8 <_puts_r+0x8c>
 8003b88:	290a      	cmp	r1, #10
 8003b8a:	d015      	beq.n	8003bb8 <_puts_r+0x8c>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	6022      	str	r2, [r4, #0]
 8003b92:	7019      	strb	r1, [r3, #0]
 8003b94:	68a3      	ldr	r3, [r4, #8]
 8003b96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60a3      	str	r3, [r4, #8]
 8003b9e:	2900      	cmp	r1, #0
 8003ba0:	d1ed      	bne.n	8003b7e <_puts_r+0x52>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	da11      	bge.n	8003bca <_puts_r+0x9e>
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	210a      	movs	r1, #10
 8003baa:	4628      	mov	r0, r5
 8003bac:	f000 fcbd 	bl	800452a <__swbuf_r>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d0d7      	beq.n	8003b64 <_puts_r+0x38>
 8003bb4:	250a      	movs	r5, #10
 8003bb6:	e7d7      	b.n	8003b68 <_puts_r+0x3c>
 8003bb8:	4622      	mov	r2, r4
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f000 fcb5 	bl	800452a <__swbuf_r>
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d1e7      	bne.n	8003b94 <_puts_r+0x68>
 8003bc4:	e7ce      	b.n	8003b64 <_puts_r+0x38>
 8003bc6:	3e01      	subs	r6, #1
 8003bc8:	e7e4      	b.n	8003b94 <_puts_r+0x68>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	6022      	str	r2, [r4, #0]
 8003bd0:	220a      	movs	r2, #10
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e7ee      	b.n	8003bb4 <_puts_r+0x88>
	...

08003bd8 <puts>:
 8003bd8:	4b02      	ldr	r3, [pc, #8]	@ (8003be4 <puts+0xc>)
 8003bda:	4601      	mov	r1, r0
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	f7ff bfa5 	b.w	8003b2c <_puts_r>
 8003be2:	bf00      	nop
 8003be4:	200001fc 	.word	0x200001fc

08003be8 <memset>:
 8003be8:	4402      	add	r2, r0
 8003bea:	4603      	mov	r3, r0
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d100      	bne.n	8003bf2 <memset+0xa>
 8003bf0:	4770      	bx	lr
 8003bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bf6:	e7f9      	b.n	8003bec <memset+0x4>

08003bf8 <__errno>:
 8003bf8:	4b01      	ldr	r3, [pc, #4]	@ (8003c00 <__errno+0x8>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	200001fc 	.word	0x200001fc

08003c04 <__libc_init_array>:
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	4d0d      	ldr	r5, [pc, #52]	@ (8003c3c <__libc_init_array+0x38>)
 8003c08:	4c0d      	ldr	r4, [pc, #52]	@ (8003c40 <__libc_init_array+0x3c>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	2600      	movs	r6, #0
 8003c10:	42a6      	cmp	r6, r4
 8003c12:	d109      	bne.n	8003c28 <__libc_init_array+0x24>
 8003c14:	4d0b      	ldr	r5, [pc, #44]	@ (8003c44 <__libc_init_array+0x40>)
 8003c16:	4c0c      	ldr	r4, [pc, #48]	@ (8003c48 <__libc_init_array+0x44>)
 8003c18:	f000 fe40 	bl	800489c <_init>
 8003c1c:	1b64      	subs	r4, r4, r5
 8003c1e:	10a4      	asrs	r4, r4, #2
 8003c20:	2600      	movs	r6, #0
 8003c22:	42a6      	cmp	r6, r4
 8003c24:	d105      	bne.n	8003c32 <__libc_init_array+0x2e>
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c2c:	4798      	blx	r3
 8003c2e:	3601      	adds	r6, #1
 8003c30:	e7ee      	b.n	8003c10 <__libc_init_array+0xc>
 8003c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c36:	4798      	blx	r3
 8003c38:	3601      	adds	r6, #1
 8003c3a:	e7f2      	b.n	8003c22 <__libc_init_array+0x1e>
 8003c3c:	080049ec 	.word	0x080049ec
 8003c40:	080049ec 	.word	0x080049ec
 8003c44:	080049ec 	.word	0x080049ec
 8003c48:	080049f0 	.word	0x080049f0

08003c4c <__retarget_lock_init_recursive>:
 8003c4c:	4770      	bx	lr

08003c4e <__retarget_lock_acquire_recursive>:
 8003c4e:	4770      	bx	lr

08003c50 <__retarget_lock_release_recursive>:
 8003c50:	4770      	bx	lr

08003c52 <__sfputc_r>:
 8003c52:	6893      	ldr	r3, [r2, #8]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	b410      	push	{r4}
 8003c5a:	6093      	str	r3, [r2, #8]
 8003c5c:	da08      	bge.n	8003c70 <__sfputc_r+0x1e>
 8003c5e:	6994      	ldr	r4, [r2, #24]
 8003c60:	42a3      	cmp	r3, r4
 8003c62:	db01      	blt.n	8003c68 <__sfputc_r+0x16>
 8003c64:	290a      	cmp	r1, #10
 8003c66:	d103      	bne.n	8003c70 <__sfputc_r+0x1e>
 8003c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c6c:	f000 bc5d 	b.w	800452a <__swbuf_r>
 8003c70:	6813      	ldr	r3, [r2, #0]
 8003c72:	1c58      	adds	r0, r3, #1
 8003c74:	6010      	str	r0, [r2, #0]
 8003c76:	7019      	strb	r1, [r3, #0]
 8003c78:	4608      	mov	r0, r1
 8003c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <__sfputs_r>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	4606      	mov	r6, r0
 8003c84:	460f      	mov	r7, r1
 8003c86:	4614      	mov	r4, r2
 8003c88:	18d5      	adds	r5, r2, r3
 8003c8a:	42ac      	cmp	r4, r5
 8003c8c:	d101      	bne.n	8003c92 <__sfputs_r+0x12>
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e007      	b.n	8003ca2 <__sfputs_r+0x22>
 8003c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c96:	463a      	mov	r2, r7
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f7ff ffda 	bl	8003c52 <__sfputc_r>
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	d1f3      	bne.n	8003c8a <__sfputs_r+0xa>
 8003ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ca4 <_vfiprintf_r>:
 8003ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	460d      	mov	r5, r1
 8003caa:	b09d      	sub	sp, #116	@ 0x74
 8003cac:	4614      	mov	r4, r2
 8003cae:	4698      	mov	r8, r3
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	b118      	cbz	r0, 8003cbc <_vfiprintf_r+0x18>
 8003cb4:	6a03      	ldr	r3, [r0, #32]
 8003cb6:	b90b      	cbnz	r3, 8003cbc <_vfiprintf_r+0x18>
 8003cb8:	f7ff fef0 	bl	8003a9c <__sinit>
 8003cbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cbe:	07d9      	lsls	r1, r3, #31
 8003cc0:	d405      	bmi.n	8003cce <_vfiprintf_r+0x2a>
 8003cc2:	89ab      	ldrh	r3, [r5, #12]
 8003cc4:	059a      	lsls	r2, r3, #22
 8003cc6:	d402      	bmi.n	8003cce <_vfiprintf_r+0x2a>
 8003cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cca:	f7ff ffc0 	bl	8003c4e <__retarget_lock_acquire_recursive>
 8003cce:	89ab      	ldrh	r3, [r5, #12]
 8003cd0:	071b      	lsls	r3, r3, #28
 8003cd2:	d501      	bpl.n	8003cd8 <_vfiprintf_r+0x34>
 8003cd4:	692b      	ldr	r3, [r5, #16]
 8003cd6:	b99b      	cbnz	r3, 8003d00 <_vfiprintf_r+0x5c>
 8003cd8:	4629      	mov	r1, r5
 8003cda:	4630      	mov	r0, r6
 8003cdc:	f000 fc64 	bl	80045a8 <__swsetup_r>
 8003ce0:	b170      	cbz	r0, 8003d00 <_vfiprintf_r+0x5c>
 8003ce2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ce4:	07dc      	lsls	r4, r3, #31
 8003ce6:	d504      	bpl.n	8003cf2 <_vfiprintf_r+0x4e>
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cec:	b01d      	add	sp, #116	@ 0x74
 8003cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf2:	89ab      	ldrh	r3, [r5, #12]
 8003cf4:	0598      	lsls	r0, r3, #22
 8003cf6:	d4f7      	bmi.n	8003ce8 <_vfiprintf_r+0x44>
 8003cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cfa:	f7ff ffa9 	bl	8003c50 <__retarget_lock_release_recursive>
 8003cfe:	e7f3      	b.n	8003ce8 <_vfiprintf_r+0x44>
 8003d00:	2300      	movs	r3, #0
 8003d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d04:	2320      	movs	r3, #32
 8003d06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d0e:	2330      	movs	r3, #48	@ 0x30
 8003d10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ec0 <_vfiprintf_r+0x21c>
 8003d14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d18:	f04f 0901 	mov.w	r9, #1
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	469a      	mov	sl, r3
 8003d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d24:	b10a      	cbz	r2, 8003d2a <_vfiprintf_r+0x86>
 8003d26:	2a25      	cmp	r2, #37	@ 0x25
 8003d28:	d1f9      	bne.n	8003d1e <_vfiprintf_r+0x7a>
 8003d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8003d2e:	d00b      	beq.n	8003d48 <_vfiprintf_r+0xa4>
 8003d30:	465b      	mov	r3, fp
 8003d32:	4622      	mov	r2, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	4630      	mov	r0, r6
 8003d38:	f7ff ffa2 	bl	8003c80 <__sfputs_r>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f000 80a7 	beq.w	8003e90 <_vfiprintf_r+0x1ec>
 8003d42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d44:	445a      	add	r2, fp
 8003d46:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d48:	f89a 3000 	ldrb.w	r3, [sl]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 809f 	beq.w	8003e90 <_vfiprintf_r+0x1ec>
 8003d52:	2300      	movs	r3, #0
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d5c:	f10a 0a01 	add.w	sl, sl, #1
 8003d60:	9304      	str	r3, [sp, #16]
 8003d62:	9307      	str	r3, [sp, #28]
 8003d64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d68:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d6a:	4654      	mov	r4, sl
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d72:	4853      	ldr	r0, [pc, #332]	@ (8003ec0 <_vfiprintf_r+0x21c>)
 8003d74:	f7fc fa34 	bl	80001e0 <memchr>
 8003d78:	9a04      	ldr	r2, [sp, #16]
 8003d7a:	b9d8      	cbnz	r0, 8003db4 <_vfiprintf_r+0x110>
 8003d7c:	06d1      	lsls	r1, r2, #27
 8003d7e:	bf44      	itt	mi
 8003d80:	2320      	movmi	r3, #32
 8003d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d86:	0713      	lsls	r3, r2, #28
 8003d88:	bf44      	itt	mi
 8003d8a:	232b      	movmi	r3, #43	@ 0x2b
 8003d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d90:	f89a 3000 	ldrb.w	r3, [sl]
 8003d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d96:	d015      	beq.n	8003dc4 <_vfiprintf_r+0x120>
 8003d98:	9a07      	ldr	r2, [sp, #28]
 8003d9a:	4654      	mov	r4, sl
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f04f 0c0a 	mov.w	ip, #10
 8003da2:	4621      	mov	r1, r4
 8003da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da8:	3b30      	subs	r3, #48	@ 0x30
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	d94b      	bls.n	8003e46 <_vfiprintf_r+0x1a2>
 8003dae:	b1b0      	cbz	r0, 8003dde <_vfiprintf_r+0x13a>
 8003db0:	9207      	str	r2, [sp, #28]
 8003db2:	e014      	b.n	8003dde <_vfiprintf_r+0x13a>
 8003db4:	eba0 0308 	sub.w	r3, r0, r8
 8003db8:	fa09 f303 	lsl.w	r3, r9, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	46a2      	mov	sl, r4
 8003dc2:	e7d2      	b.n	8003d6a <_vfiprintf_r+0xc6>
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	1d19      	adds	r1, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	9103      	str	r1, [sp, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bfbb      	ittet	lt
 8003dd0:	425b      	neglt	r3, r3
 8003dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd6:	9307      	strge	r3, [sp, #28]
 8003dd8:	9307      	strlt	r3, [sp, #28]
 8003dda:	bfb8      	it	lt
 8003ddc:	9204      	strlt	r2, [sp, #16]
 8003dde:	7823      	ldrb	r3, [r4, #0]
 8003de0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003de2:	d10a      	bne.n	8003dfa <_vfiprintf_r+0x156>
 8003de4:	7863      	ldrb	r3, [r4, #1]
 8003de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003de8:	d132      	bne.n	8003e50 <_vfiprintf_r+0x1ac>
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	1d1a      	adds	r2, r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	9203      	str	r2, [sp, #12]
 8003df2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003df6:	3402      	adds	r4, #2
 8003df8:	9305      	str	r3, [sp, #20]
 8003dfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003ed0 <_vfiprintf_r+0x22c>
 8003dfe:	7821      	ldrb	r1, [r4, #0]
 8003e00:	2203      	movs	r2, #3
 8003e02:	4650      	mov	r0, sl
 8003e04:	f7fc f9ec 	bl	80001e0 <memchr>
 8003e08:	b138      	cbz	r0, 8003e1a <_vfiprintf_r+0x176>
 8003e0a:	9b04      	ldr	r3, [sp, #16]
 8003e0c:	eba0 000a 	sub.w	r0, r0, sl
 8003e10:	2240      	movs	r2, #64	@ 0x40
 8003e12:	4082      	lsls	r2, r0
 8003e14:	4313      	orrs	r3, r2
 8003e16:	3401      	adds	r4, #1
 8003e18:	9304      	str	r3, [sp, #16]
 8003e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1e:	4829      	ldr	r0, [pc, #164]	@ (8003ec4 <_vfiprintf_r+0x220>)
 8003e20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e24:	2206      	movs	r2, #6
 8003e26:	f7fc f9db 	bl	80001e0 <memchr>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d03f      	beq.n	8003eae <_vfiprintf_r+0x20a>
 8003e2e:	4b26      	ldr	r3, [pc, #152]	@ (8003ec8 <_vfiprintf_r+0x224>)
 8003e30:	bb1b      	cbnz	r3, 8003e7a <_vfiprintf_r+0x1d6>
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	3307      	adds	r3, #7
 8003e36:	f023 0307 	bic.w	r3, r3, #7
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	9303      	str	r3, [sp, #12]
 8003e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e40:	443b      	add	r3, r7
 8003e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e44:	e76a      	b.n	8003d1c <_vfiprintf_r+0x78>
 8003e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	e7a8      	b.n	8003da2 <_vfiprintf_r+0xfe>
 8003e50:	2300      	movs	r3, #0
 8003e52:	3401      	adds	r4, #1
 8003e54:	9305      	str	r3, [sp, #20]
 8003e56:	4619      	mov	r1, r3
 8003e58:	f04f 0c0a 	mov.w	ip, #10
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e62:	3a30      	subs	r2, #48	@ 0x30
 8003e64:	2a09      	cmp	r2, #9
 8003e66:	d903      	bls.n	8003e70 <_vfiprintf_r+0x1cc>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0c6      	beq.n	8003dfa <_vfiprintf_r+0x156>
 8003e6c:	9105      	str	r1, [sp, #20]
 8003e6e:	e7c4      	b.n	8003dfa <_vfiprintf_r+0x156>
 8003e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e74:	4604      	mov	r4, r0
 8003e76:	2301      	movs	r3, #1
 8003e78:	e7f0      	b.n	8003e5c <_vfiprintf_r+0x1b8>
 8003e7a:	ab03      	add	r3, sp, #12
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	462a      	mov	r2, r5
 8003e80:	4b12      	ldr	r3, [pc, #72]	@ (8003ecc <_vfiprintf_r+0x228>)
 8003e82:	a904      	add	r1, sp, #16
 8003e84:	4630      	mov	r0, r6
 8003e86:	f3af 8000 	nop.w
 8003e8a:	4607      	mov	r7, r0
 8003e8c:	1c78      	adds	r0, r7, #1
 8003e8e:	d1d6      	bne.n	8003e3e <_vfiprintf_r+0x19a>
 8003e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e92:	07d9      	lsls	r1, r3, #31
 8003e94:	d405      	bmi.n	8003ea2 <_vfiprintf_r+0x1fe>
 8003e96:	89ab      	ldrh	r3, [r5, #12]
 8003e98:	059a      	lsls	r2, r3, #22
 8003e9a:	d402      	bmi.n	8003ea2 <_vfiprintf_r+0x1fe>
 8003e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e9e:	f7ff fed7 	bl	8003c50 <__retarget_lock_release_recursive>
 8003ea2:	89ab      	ldrh	r3, [r5, #12]
 8003ea4:	065b      	lsls	r3, r3, #25
 8003ea6:	f53f af1f 	bmi.w	8003ce8 <_vfiprintf_r+0x44>
 8003eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003eac:	e71e      	b.n	8003cec <_vfiprintf_r+0x48>
 8003eae:	ab03      	add	r3, sp, #12
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	462a      	mov	r2, r5
 8003eb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <_vfiprintf_r+0x228>)
 8003eb6:	a904      	add	r1, sp, #16
 8003eb8:	4630      	mov	r0, r6
 8003eba:	f000 f91b 	bl	80040f4 <_printf_i>
 8003ebe:	e7e4      	b.n	8003e8a <_vfiprintf_r+0x1e6>
 8003ec0:	080049b0 	.word	0x080049b0
 8003ec4:	080049ba 	.word	0x080049ba
 8003ec8:	00000000 	.word	0x00000000
 8003ecc:	08003c81 	.word	0x08003c81
 8003ed0:	080049b6 	.word	0x080049b6

08003ed4 <sbrk_aligned>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4e0f      	ldr	r6, [pc, #60]	@ (8003f14 <sbrk_aligned+0x40>)
 8003ed8:	460c      	mov	r4, r1
 8003eda:	6831      	ldr	r1, [r6, #0]
 8003edc:	4605      	mov	r5, r0
 8003ede:	b911      	cbnz	r1, 8003ee6 <sbrk_aligned+0x12>
 8003ee0:	f000 fc70 	bl	80047c4 <_sbrk_r>
 8003ee4:	6030      	str	r0, [r6, #0]
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f000 fc6b 	bl	80047c4 <_sbrk_r>
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	d103      	bne.n	8003efa <sbrk_aligned+0x26>
 8003ef2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	bd70      	pop	{r4, r5, r6, pc}
 8003efa:	1cc4      	adds	r4, r0, #3
 8003efc:	f024 0403 	bic.w	r4, r4, #3
 8003f00:	42a0      	cmp	r0, r4
 8003f02:	d0f8      	beq.n	8003ef6 <sbrk_aligned+0x22>
 8003f04:	1a21      	subs	r1, r4, r0
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 fc5c 	bl	80047c4 <_sbrk_r>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d1f2      	bne.n	8003ef6 <sbrk_aligned+0x22>
 8003f10:	e7ef      	b.n	8003ef2 <sbrk_aligned+0x1e>
 8003f12:	bf00      	nop
 8003f14:	200004e0 	.word	0x200004e0

08003f18 <_malloc_r>:
 8003f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f1c:	1ccd      	adds	r5, r1, #3
 8003f1e:	f025 0503 	bic.w	r5, r5, #3
 8003f22:	3508      	adds	r5, #8
 8003f24:	2d0c      	cmp	r5, #12
 8003f26:	bf38      	it	cc
 8003f28:	250c      	movcc	r5, #12
 8003f2a:	2d00      	cmp	r5, #0
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	db01      	blt.n	8003f34 <_malloc_r+0x1c>
 8003f30:	42a9      	cmp	r1, r5
 8003f32:	d904      	bls.n	8003f3e <_malloc_r+0x26>
 8003f34:	230c      	movs	r3, #12
 8003f36:	6033      	str	r3, [r6, #0]
 8003f38:	2000      	movs	r0, #0
 8003f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004014 <_malloc_r+0xfc>
 8003f42:	f000 faa3 	bl	800448c <__malloc_lock>
 8003f46:	f8d8 3000 	ldr.w	r3, [r8]
 8003f4a:	461c      	mov	r4, r3
 8003f4c:	bb44      	cbnz	r4, 8003fa0 <_malloc_r+0x88>
 8003f4e:	4629      	mov	r1, r5
 8003f50:	4630      	mov	r0, r6
 8003f52:	f7ff ffbf 	bl	8003ed4 <sbrk_aligned>
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	4604      	mov	r4, r0
 8003f5a:	d158      	bne.n	800400e <_malloc_r+0xf6>
 8003f5c:	f8d8 4000 	ldr.w	r4, [r8]
 8003f60:	4627      	mov	r7, r4
 8003f62:	2f00      	cmp	r7, #0
 8003f64:	d143      	bne.n	8003fee <_malloc_r+0xd6>
 8003f66:	2c00      	cmp	r4, #0
 8003f68:	d04b      	beq.n	8004002 <_malloc_r+0xea>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	4639      	mov	r1, r7
 8003f6e:	4630      	mov	r0, r6
 8003f70:	eb04 0903 	add.w	r9, r4, r3
 8003f74:	f000 fc26 	bl	80047c4 <_sbrk_r>
 8003f78:	4581      	cmp	r9, r0
 8003f7a:	d142      	bne.n	8004002 <_malloc_r+0xea>
 8003f7c:	6821      	ldr	r1, [r4, #0]
 8003f7e:	1a6d      	subs	r5, r5, r1
 8003f80:	4629      	mov	r1, r5
 8003f82:	4630      	mov	r0, r6
 8003f84:	f7ff ffa6 	bl	8003ed4 <sbrk_aligned>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d03a      	beq.n	8004002 <_malloc_r+0xea>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	442b      	add	r3, r5
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	f8d8 3000 	ldr.w	r3, [r8]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	bb62      	cbnz	r2, 8003ff4 <_malloc_r+0xdc>
 8003f9a:	f8c8 7000 	str.w	r7, [r8]
 8003f9e:	e00f      	b.n	8003fc0 <_malloc_r+0xa8>
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	1b52      	subs	r2, r2, r5
 8003fa4:	d420      	bmi.n	8003fe8 <_malloc_r+0xd0>
 8003fa6:	2a0b      	cmp	r2, #11
 8003fa8:	d917      	bls.n	8003fda <_malloc_r+0xc2>
 8003faa:	1961      	adds	r1, r4, r5
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	6025      	str	r5, [r4, #0]
 8003fb0:	bf18      	it	ne
 8003fb2:	6059      	strne	r1, [r3, #4]
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	bf08      	it	eq
 8003fb8:	f8c8 1000 	streq.w	r1, [r8]
 8003fbc:	5162      	str	r2, [r4, r5]
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f000 fa69 	bl	8004498 <__malloc_unlock>
 8003fc6:	f104 000b 	add.w	r0, r4, #11
 8003fca:	1d23      	adds	r3, r4, #4
 8003fcc:	f020 0007 	bic.w	r0, r0, #7
 8003fd0:	1ac2      	subs	r2, r0, r3
 8003fd2:	bf1c      	itt	ne
 8003fd4:	1a1b      	subne	r3, r3, r0
 8003fd6:	50a3      	strne	r3, [r4, r2]
 8003fd8:	e7af      	b.n	8003f3a <_malloc_r+0x22>
 8003fda:	6862      	ldr	r2, [r4, #4]
 8003fdc:	42a3      	cmp	r3, r4
 8003fde:	bf0c      	ite	eq
 8003fe0:	f8c8 2000 	streq.w	r2, [r8]
 8003fe4:	605a      	strne	r2, [r3, #4]
 8003fe6:	e7eb      	b.n	8003fc0 <_malloc_r+0xa8>
 8003fe8:	4623      	mov	r3, r4
 8003fea:	6864      	ldr	r4, [r4, #4]
 8003fec:	e7ae      	b.n	8003f4c <_malloc_r+0x34>
 8003fee:	463c      	mov	r4, r7
 8003ff0:	687f      	ldr	r7, [r7, #4]
 8003ff2:	e7b6      	b.n	8003f62 <_malloc_r+0x4a>
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	d1fb      	bne.n	8003ff4 <_malloc_r+0xdc>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	6053      	str	r3, [r2, #4]
 8004000:	e7de      	b.n	8003fc0 <_malloc_r+0xa8>
 8004002:	230c      	movs	r3, #12
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	4630      	mov	r0, r6
 8004008:	f000 fa46 	bl	8004498 <__malloc_unlock>
 800400c:	e794      	b.n	8003f38 <_malloc_r+0x20>
 800400e:	6005      	str	r5, [r0, #0]
 8004010:	e7d6      	b.n	8003fc0 <_malloc_r+0xa8>
 8004012:	bf00      	nop
 8004014:	200004e4 	.word	0x200004e4

08004018 <_printf_common>:
 8004018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800401c:	4616      	mov	r6, r2
 800401e:	4698      	mov	r8, r3
 8004020:	688a      	ldr	r2, [r1, #8]
 8004022:	690b      	ldr	r3, [r1, #16]
 8004024:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004028:	4293      	cmp	r3, r2
 800402a:	bfb8      	it	lt
 800402c:	4613      	movlt	r3, r2
 800402e:	6033      	str	r3, [r6, #0]
 8004030:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004034:	4607      	mov	r7, r0
 8004036:	460c      	mov	r4, r1
 8004038:	b10a      	cbz	r2, 800403e <_printf_common+0x26>
 800403a:	3301      	adds	r3, #1
 800403c:	6033      	str	r3, [r6, #0]
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	0699      	lsls	r1, r3, #26
 8004042:	bf42      	ittt	mi
 8004044:	6833      	ldrmi	r3, [r6, #0]
 8004046:	3302      	addmi	r3, #2
 8004048:	6033      	strmi	r3, [r6, #0]
 800404a:	6825      	ldr	r5, [r4, #0]
 800404c:	f015 0506 	ands.w	r5, r5, #6
 8004050:	d106      	bne.n	8004060 <_printf_common+0x48>
 8004052:	f104 0a19 	add.w	sl, r4, #25
 8004056:	68e3      	ldr	r3, [r4, #12]
 8004058:	6832      	ldr	r2, [r6, #0]
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	42ab      	cmp	r3, r5
 800405e:	dc26      	bgt.n	80040ae <_printf_common+0x96>
 8004060:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	3b00      	subs	r3, #0
 8004068:	bf18      	it	ne
 800406a:	2301      	movne	r3, #1
 800406c:	0692      	lsls	r2, r2, #26
 800406e:	d42b      	bmi.n	80040c8 <_printf_common+0xb0>
 8004070:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004074:	4641      	mov	r1, r8
 8004076:	4638      	mov	r0, r7
 8004078:	47c8      	blx	r9
 800407a:	3001      	adds	r0, #1
 800407c:	d01e      	beq.n	80040bc <_printf_common+0xa4>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	6922      	ldr	r2, [r4, #16]
 8004082:	f003 0306 	and.w	r3, r3, #6
 8004086:	2b04      	cmp	r3, #4
 8004088:	bf02      	ittt	eq
 800408a:	68e5      	ldreq	r5, [r4, #12]
 800408c:	6833      	ldreq	r3, [r6, #0]
 800408e:	1aed      	subeq	r5, r5, r3
 8004090:	68a3      	ldr	r3, [r4, #8]
 8004092:	bf0c      	ite	eq
 8004094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004098:	2500      	movne	r5, #0
 800409a:	4293      	cmp	r3, r2
 800409c:	bfc4      	itt	gt
 800409e:	1a9b      	subgt	r3, r3, r2
 80040a0:	18ed      	addgt	r5, r5, r3
 80040a2:	2600      	movs	r6, #0
 80040a4:	341a      	adds	r4, #26
 80040a6:	42b5      	cmp	r5, r6
 80040a8:	d11a      	bne.n	80040e0 <_printf_common+0xc8>
 80040aa:	2000      	movs	r0, #0
 80040ac:	e008      	b.n	80040c0 <_printf_common+0xa8>
 80040ae:	2301      	movs	r3, #1
 80040b0:	4652      	mov	r2, sl
 80040b2:	4641      	mov	r1, r8
 80040b4:	4638      	mov	r0, r7
 80040b6:	47c8      	blx	r9
 80040b8:	3001      	adds	r0, #1
 80040ba:	d103      	bne.n	80040c4 <_printf_common+0xac>
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c4:	3501      	adds	r5, #1
 80040c6:	e7c6      	b.n	8004056 <_printf_common+0x3e>
 80040c8:	18e1      	adds	r1, r4, r3
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	2030      	movs	r0, #48	@ 0x30
 80040ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040d2:	4422      	add	r2, r4
 80040d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040dc:	3302      	adds	r3, #2
 80040de:	e7c7      	b.n	8004070 <_printf_common+0x58>
 80040e0:	2301      	movs	r3, #1
 80040e2:	4622      	mov	r2, r4
 80040e4:	4641      	mov	r1, r8
 80040e6:	4638      	mov	r0, r7
 80040e8:	47c8      	blx	r9
 80040ea:	3001      	adds	r0, #1
 80040ec:	d0e6      	beq.n	80040bc <_printf_common+0xa4>
 80040ee:	3601      	adds	r6, #1
 80040f0:	e7d9      	b.n	80040a6 <_printf_common+0x8e>
	...

080040f4 <_printf_i>:
 80040f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040f8:	7e0f      	ldrb	r7, [r1, #24]
 80040fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040fc:	2f78      	cmp	r7, #120	@ 0x78
 80040fe:	4691      	mov	r9, r2
 8004100:	4680      	mov	r8, r0
 8004102:	460c      	mov	r4, r1
 8004104:	469a      	mov	sl, r3
 8004106:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800410a:	d807      	bhi.n	800411c <_printf_i+0x28>
 800410c:	2f62      	cmp	r7, #98	@ 0x62
 800410e:	d80a      	bhi.n	8004126 <_printf_i+0x32>
 8004110:	2f00      	cmp	r7, #0
 8004112:	f000 80d2 	beq.w	80042ba <_printf_i+0x1c6>
 8004116:	2f58      	cmp	r7, #88	@ 0x58
 8004118:	f000 80b9 	beq.w	800428e <_printf_i+0x19a>
 800411c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004120:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004124:	e03a      	b.n	800419c <_printf_i+0xa8>
 8004126:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800412a:	2b15      	cmp	r3, #21
 800412c:	d8f6      	bhi.n	800411c <_printf_i+0x28>
 800412e:	a101      	add	r1, pc, #4	@ (adr r1, 8004134 <_printf_i+0x40>)
 8004130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004134:	0800418d 	.word	0x0800418d
 8004138:	080041a1 	.word	0x080041a1
 800413c:	0800411d 	.word	0x0800411d
 8004140:	0800411d 	.word	0x0800411d
 8004144:	0800411d 	.word	0x0800411d
 8004148:	0800411d 	.word	0x0800411d
 800414c:	080041a1 	.word	0x080041a1
 8004150:	0800411d 	.word	0x0800411d
 8004154:	0800411d 	.word	0x0800411d
 8004158:	0800411d 	.word	0x0800411d
 800415c:	0800411d 	.word	0x0800411d
 8004160:	080042a1 	.word	0x080042a1
 8004164:	080041cb 	.word	0x080041cb
 8004168:	0800425b 	.word	0x0800425b
 800416c:	0800411d 	.word	0x0800411d
 8004170:	0800411d 	.word	0x0800411d
 8004174:	080042c3 	.word	0x080042c3
 8004178:	0800411d 	.word	0x0800411d
 800417c:	080041cb 	.word	0x080041cb
 8004180:	0800411d 	.word	0x0800411d
 8004184:	0800411d 	.word	0x0800411d
 8004188:	08004263 	.word	0x08004263
 800418c:	6833      	ldr	r3, [r6, #0]
 800418e:	1d1a      	adds	r2, r3, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6032      	str	r2, [r6, #0]
 8004194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004198:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800419c:	2301      	movs	r3, #1
 800419e:	e09d      	b.n	80042dc <_printf_i+0x1e8>
 80041a0:	6833      	ldr	r3, [r6, #0]
 80041a2:	6820      	ldr	r0, [r4, #0]
 80041a4:	1d19      	adds	r1, r3, #4
 80041a6:	6031      	str	r1, [r6, #0]
 80041a8:	0606      	lsls	r6, r0, #24
 80041aa:	d501      	bpl.n	80041b0 <_printf_i+0xbc>
 80041ac:	681d      	ldr	r5, [r3, #0]
 80041ae:	e003      	b.n	80041b8 <_printf_i+0xc4>
 80041b0:	0645      	lsls	r5, r0, #25
 80041b2:	d5fb      	bpl.n	80041ac <_printf_i+0xb8>
 80041b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041b8:	2d00      	cmp	r5, #0
 80041ba:	da03      	bge.n	80041c4 <_printf_i+0xd0>
 80041bc:	232d      	movs	r3, #45	@ 0x2d
 80041be:	426d      	negs	r5, r5
 80041c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041c4:	4859      	ldr	r0, [pc, #356]	@ (800432c <_printf_i+0x238>)
 80041c6:	230a      	movs	r3, #10
 80041c8:	e011      	b.n	80041ee <_printf_i+0xfa>
 80041ca:	6821      	ldr	r1, [r4, #0]
 80041cc:	6833      	ldr	r3, [r6, #0]
 80041ce:	0608      	lsls	r0, r1, #24
 80041d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80041d4:	d402      	bmi.n	80041dc <_printf_i+0xe8>
 80041d6:	0649      	lsls	r1, r1, #25
 80041d8:	bf48      	it	mi
 80041da:	b2ad      	uxthmi	r5, r5
 80041dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80041de:	4853      	ldr	r0, [pc, #332]	@ (800432c <_printf_i+0x238>)
 80041e0:	6033      	str	r3, [r6, #0]
 80041e2:	bf14      	ite	ne
 80041e4:	230a      	movne	r3, #10
 80041e6:	2308      	moveq	r3, #8
 80041e8:	2100      	movs	r1, #0
 80041ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041ee:	6866      	ldr	r6, [r4, #4]
 80041f0:	60a6      	str	r6, [r4, #8]
 80041f2:	2e00      	cmp	r6, #0
 80041f4:	bfa2      	ittt	ge
 80041f6:	6821      	ldrge	r1, [r4, #0]
 80041f8:	f021 0104 	bicge.w	r1, r1, #4
 80041fc:	6021      	strge	r1, [r4, #0]
 80041fe:	b90d      	cbnz	r5, 8004204 <_printf_i+0x110>
 8004200:	2e00      	cmp	r6, #0
 8004202:	d04b      	beq.n	800429c <_printf_i+0x1a8>
 8004204:	4616      	mov	r6, r2
 8004206:	fbb5 f1f3 	udiv	r1, r5, r3
 800420a:	fb03 5711 	mls	r7, r3, r1, r5
 800420e:	5dc7      	ldrb	r7, [r0, r7]
 8004210:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004214:	462f      	mov	r7, r5
 8004216:	42bb      	cmp	r3, r7
 8004218:	460d      	mov	r5, r1
 800421a:	d9f4      	bls.n	8004206 <_printf_i+0x112>
 800421c:	2b08      	cmp	r3, #8
 800421e:	d10b      	bne.n	8004238 <_printf_i+0x144>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	07df      	lsls	r7, r3, #31
 8004224:	d508      	bpl.n	8004238 <_printf_i+0x144>
 8004226:	6923      	ldr	r3, [r4, #16]
 8004228:	6861      	ldr	r1, [r4, #4]
 800422a:	4299      	cmp	r1, r3
 800422c:	bfde      	ittt	le
 800422e:	2330      	movle	r3, #48	@ 0x30
 8004230:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004234:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004238:	1b92      	subs	r2, r2, r6
 800423a:	6122      	str	r2, [r4, #16]
 800423c:	f8cd a000 	str.w	sl, [sp]
 8004240:	464b      	mov	r3, r9
 8004242:	aa03      	add	r2, sp, #12
 8004244:	4621      	mov	r1, r4
 8004246:	4640      	mov	r0, r8
 8004248:	f7ff fee6 	bl	8004018 <_printf_common>
 800424c:	3001      	adds	r0, #1
 800424e:	d14a      	bne.n	80042e6 <_printf_i+0x1f2>
 8004250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004254:	b004      	add	sp, #16
 8004256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	f043 0320 	orr.w	r3, r3, #32
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	4833      	ldr	r0, [pc, #204]	@ (8004330 <_printf_i+0x23c>)
 8004264:	2778      	movs	r7, #120	@ 0x78
 8004266:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	6831      	ldr	r1, [r6, #0]
 800426e:	061f      	lsls	r7, r3, #24
 8004270:	f851 5b04 	ldr.w	r5, [r1], #4
 8004274:	d402      	bmi.n	800427c <_printf_i+0x188>
 8004276:	065f      	lsls	r7, r3, #25
 8004278:	bf48      	it	mi
 800427a:	b2ad      	uxthmi	r5, r5
 800427c:	6031      	str	r1, [r6, #0]
 800427e:	07d9      	lsls	r1, r3, #31
 8004280:	bf44      	itt	mi
 8004282:	f043 0320 	orrmi.w	r3, r3, #32
 8004286:	6023      	strmi	r3, [r4, #0]
 8004288:	b11d      	cbz	r5, 8004292 <_printf_i+0x19e>
 800428a:	2310      	movs	r3, #16
 800428c:	e7ac      	b.n	80041e8 <_printf_i+0xf4>
 800428e:	4827      	ldr	r0, [pc, #156]	@ (800432c <_printf_i+0x238>)
 8004290:	e7e9      	b.n	8004266 <_printf_i+0x172>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	f023 0320 	bic.w	r3, r3, #32
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	e7f6      	b.n	800428a <_printf_i+0x196>
 800429c:	4616      	mov	r6, r2
 800429e:	e7bd      	b.n	800421c <_printf_i+0x128>
 80042a0:	6833      	ldr	r3, [r6, #0]
 80042a2:	6825      	ldr	r5, [r4, #0]
 80042a4:	6961      	ldr	r1, [r4, #20]
 80042a6:	1d18      	adds	r0, r3, #4
 80042a8:	6030      	str	r0, [r6, #0]
 80042aa:	062e      	lsls	r6, r5, #24
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	d501      	bpl.n	80042b4 <_printf_i+0x1c0>
 80042b0:	6019      	str	r1, [r3, #0]
 80042b2:	e002      	b.n	80042ba <_printf_i+0x1c6>
 80042b4:	0668      	lsls	r0, r5, #25
 80042b6:	d5fb      	bpl.n	80042b0 <_printf_i+0x1bc>
 80042b8:	8019      	strh	r1, [r3, #0]
 80042ba:	2300      	movs	r3, #0
 80042bc:	6123      	str	r3, [r4, #16]
 80042be:	4616      	mov	r6, r2
 80042c0:	e7bc      	b.n	800423c <_printf_i+0x148>
 80042c2:	6833      	ldr	r3, [r6, #0]
 80042c4:	1d1a      	adds	r2, r3, #4
 80042c6:	6032      	str	r2, [r6, #0]
 80042c8:	681e      	ldr	r6, [r3, #0]
 80042ca:	6862      	ldr	r2, [r4, #4]
 80042cc:	2100      	movs	r1, #0
 80042ce:	4630      	mov	r0, r6
 80042d0:	f7fb ff86 	bl	80001e0 <memchr>
 80042d4:	b108      	cbz	r0, 80042da <_printf_i+0x1e6>
 80042d6:	1b80      	subs	r0, r0, r6
 80042d8:	6060      	str	r0, [r4, #4]
 80042da:	6863      	ldr	r3, [r4, #4]
 80042dc:	6123      	str	r3, [r4, #16]
 80042de:	2300      	movs	r3, #0
 80042e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042e4:	e7aa      	b.n	800423c <_printf_i+0x148>
 80042e6:	6923      	ldr	r3, [r4, #16]
 80042e8:	4632      	mov	r2, r6
 80042ea:	4649      	mov	r1, r9
 80042ec:	4640      	mov	r0, r8
 80042ee:	47d0      	blx	sl
 80042f0:	3001      	adds	r0, #1
 80042f2:	d0ad      	beq.n	8004250 <_printf_i+0x15c>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	079b      	lsls	r3, r3, #30
 80042f8:	d413      	bmi.n	8004322 <_printf_i+0x22e>
 80042fa:	68e0      	ldr	r0, [r4, #12]
 80042fc:	9b03      	ldr	r3, [sp, #12]
 80042fe:	4298      	cmp	r0, r3
 8004300:	bfb8      	it	lt
 8004302:	4618      	movlt	r0, r3
 8004304:	e7a6      	b.n	8004254 <_printf_i+0x160>
 8004306:	2301      	movs	r3, #1
 8004308:	4632      	mov	r2, r6
 800430a:	4649      	mov	r1, r9
 800430c:	4640      	mov	r0, r8
 800430e:	47d0      	blx	sl
 8004310:	3001      	adds	r0, #1
 8004312:	d09d      	beq.n	8004250 <_printf_i+0x15c>
 8004314:	3501      	adds	r5, #1
 8004316:	68e3      	ldr	r3, [r4, #12]
 8004318:	9903      	ldr	r1, [sp, #12]
 800431a:	1a5b      	subs	r3, r3, r1
 800431c:	42ab      	cmp	r3, r5
 800431e:	dcf2      	bgt.n	8004306 <_printf_i+0x212>
 8004320:	e7eb      	b.n	80042fa <_printf_i+0x206>
 8004322:	2500      	movs	r5, #0
 8004324:	f104 0619 	add.w	r6, r4, #25
 8004328:	e7f5      	b.n	8004316 <_printf_i+0x222>
 800432a:	bf00      	nop
 800432c:	080049c1 	.word	0x080049c1
 8004330:	080049d2 	.word	0x080049d2

08004334 <__sflush_r>:
 8004334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800433c:	0716      	lsls	r6, r2, #28
 800433e:	4605      	mov	r5, r0
 8004340:	460c      	mov	r4, r1
 8004342:	d454      	bmi.n	80043ee <__sflush_r+0xba>
 8004344:	684b      	ldr	r3, [r1, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	dc02      	bgt.n	8004350 <__sflush_r+0x1c>
 800434a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	dd48      	ble.n	80043e2 <__sflush_r+0xae>
 8004350:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004352:	2e00      	cmp	r6, #0
 8004354:	d045      	beq.n	80043e2 <__sflush_r+0xae>
 8004356:	2300      	movs	r3, #0
 8004358:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800435c:	682f      	ldr	r7, [r5, #0]
 800435e:	6a21      	ldr	r1, [r4, #32]
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	d030      	beq.n	80043c6 <__sflush_r+0x92>
 8004364:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	0759      	lsls	r1, r3, #29
 800436a:	d505      	bpl.n	8004378 <__sflush_r+0x44>
 800436c:	6863      	ldr	r3, [r4, #4]
 800436e:	1ad2      	subs	r2, r2, r3
 8004370:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004372:	b10b      	cbz	r3, 8004378 <__sflush_r+0x44>
 8004374:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	2300      	movs	r3, #0
 800437a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800437c:	6a21      	ldr	r1, [r4, #32]
 800437e:	4628      	mov	r0, r5
 8004380:	47b0      	blx	r6
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	d106      	bne.n	8004396 <__sflush_r+0x62>
 8004388:	6829      	ldr	r1, [r5, #0]
 800438a:	291d      	cmp	r1, #29
 800438c:	d82b      	bhi.n	80043e6 <__sflush_r+0xb2>
 800438e:	4a2a      	ldr	r2, [pc, #168]	@ (8004438 <__sflush_r+0x104>)
 8004390:	410a      	asrs	r2, r1
 8004392:	07d6      	lsls	r6, r2, #31
 8004394:	d427      	bmi.n	80043e6 <__sflush_r+0xb2>
 8004396:	2200      	movs	r2, #0
 8004398:	6062      	str	r2, [r4, #4]
 800439a:	04d9      	lsls	r1, r3, #19
 800439c:	6922      	ldr	r2, [r4, #16]
 800439e:	6022      	str	r2, [r4, #0]
 80043a0:	d504      	bpl.n	80043ac <__sflush_r+0x78>
 80043a2:	1c42      	adds	r2, r0, #1
 80043a4:	d101      	bne.n	80043aa <__sflush_r+0x76>
 80043a6:	682b      	ldr	r3, [r5, #0]
 80043a8:	b903      	cbnz	r3, 80043ac <__sflush_r+0x78>
 80043aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80043ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043ae:	602f      	str	r7, [r5, #0]
 80043b0:	b1b9      	cbz	r1, 80043e2 <__sflush_r+0xae>
 80043b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043b6:	4299      	cmp	r1, r3
 80043b8:	d002      	beq.n	80043c0 <__sflush_r+0x8c>
 80043ba:	4628      	mov	r0, r5
 80043bc:	f000 fa24 	bl	8004808 <_free_r>
 80043c0:	2300      	movs	r3, #0
 80043c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80043c4:	e00d      	b.n	80043e2 <__sflush_r+0xae>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4628      	mov	r0, r5
 80043ca:	47b0      	blx	r6
 80043cc:	4602      	mov	r2, r0
 80043ce:	1c50      	adds	r0, r2, #1
 80043d0:	d1c9      	bne.n	8004366 <__sflush_r+0x32>
 80043d2:	682b      	ldr	r3, [r5, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0c6      	beq.n	8004366 <__sflush_r+0x32>
 80043d8:	2b1d      	cmp	r3, #29
 80043da:	d001      	beq.n	80043e0 <__sflush_r+0xac>
 80043dc:	2b16      	cmp	r3, #22
 80043de:	d11e      	bne.n	800441e <__sflush_r+0xea>
 80043e0:	602f      	str	r7, [r5, #0]
 80043e2:	2000      	movs	r0, #0
 80043e4:	e022      	b.n	800442c <__sflush_r+0xf8>
 80043e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043ea:	b21b      	sxth	r3, r3
 80043ec:	e01b      	b.n	8004426 <__sflush_r+0xf2>
 80043ee:	690f      	ldr	r7, [r1, #16]
 80043f0:	2f00      	cmp	r7, #0
 80043f2:	d0f6      	beq.n	80043e2 <__sflush_r+0xae>
 80043f4:	0793      	lsls	r3, r2, #30
 80043f6:	680e      	ldr	r6, [r1, #0]
 80043f8:	bf08      	it	eq
 80043fa:	694b      	ldreq	r3, [r1, #20]
 80043fc:	600f      	str	r7, [r1, #0]
 80043fe:	bf18      	it	ne
 8004400:	2300      	movne	r3, #0
 8004402:	eba6 0807 	sub.w	r8, r6, r7
 8004406:	608b      	str	r3, [r1, #8]
 8004408:	f1b8 0f00 	cmp.w	r8, #0
 800440c:	dde9      	ble.n	80043e2 <__sflush_r+0xae>
 800440e:	6a21      	ldr	r1, [r4, #32]
 8004410:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004412:	4643      	mov	r3, r8
 8004414:	463a      	mov	r2, r7
 8004416:	4628      	mov	r0, r5
 8004418:	47b0      	blx	r6
 800441a:	2800      	cmp	r0, #0
 800441c:	dc08      	bgt.n	8004430 <__sflush_r+0xfc>
 800441e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800442c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004430:	4407      	add	r7, r0
 8004432:	eba8 0800 	sub.w	r8, r8, r0
 8004436:	e7e7      	b.n	8004408 <__sflush_r+0xd4>
 8004438:	dfbffffe 	.word	0xdfbffffe

0800443c <_fflush_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	690b      	ldr	r3, [r1, #16]
 8004440:	4605      	mov	r5, r0
 8004442:	460c      	mov	r4, r1
 8004444:	b913      	cbnz	r3, 800444c <_fflush_r+0x10>
 8004446:	2500      	movs	r5, #0
 8004448:	4628      	mov	r0, r5
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	b118      	cbz	r0, 8004456 <_fflush_r+0x1a>
 800444e:	6a03      	ldr	r3, [r0, #32]
 8004450:	b90b      	cbnz	r3, 8004456 <_fflush_r+0x1a>
 8004452:	f7ff fb23 	bl	8003a9c <__sinit>
 8004456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f3      	beq.n	8004446 <_fflush_r+0xa>
 800445e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004460:	07d0      	lsls	r0, r2, #31
 8004462:	d404      	bmi.n	800446e <_fflush_r+0x32>
 8004464:	0599      	lsls	r1, r3, #22
 8004466:	d402      	bmi.n	800446e <_fflush_r+0x32>
 8004468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800446a:	f7ff fbf0 	bl	8003c4e <__retarget_lock_acquire_recursive>
 800446e:	4628      	mov	r0, r5
 8004470:	4621      	mov	r1, r4
 8004472:	f7ff ff5f 	bl	8004334 <__sflush_r>
 8004476:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004478:	07da      	lsls	r2, r3, #31
 800447a:	4605      	mov	r5, r0
 800447c:	d4e4      	bmi.n	8004448 <_fflush_r+0xc>
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	059b      	lsls	r3, r3, #22
 8004482:	d4e1      	bmi.n	8004448 <_fflush_r+0xc>
 8004484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004486:	f7ff fbe3 	bl	8003c50 <__retarget_lock_release_recursive>
 800448a:	e7dd      	b.n	8004448 <_fflush_r+0xc>

0800448c <__malloc_lock>:
 800448c:	4801      	ldr	r0, [pc, #4]	@ (8004494 <__malloc_lock+0x8>)
 800448e:	f7ff bbde 	b.w	8003c4e <__retarget_lock_acquire_recursive>
 8004492:	bf00      	nop
 8004494:	200004dc 	.word	0x200004dc

08004498 <__malloc_unlock>:
 8004498:	4801      	ldr	r0, [pc, #4]	@ (80044a0 <__malloc_unlock+0x8>)
 800449a:	f7ff bbd9 	b.w	8003c50 <__retarget_lock_release_recursive>
 800449e:	bf00      	nop
 80044a0:	200004dc 	.word	0x200004dc

080044a4 <__sread>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	460c      	mov	r4, r1
 80044a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ac:	f000 f978 	bl	80047a0 <_read_r>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	bfab      	itete	ge
 80044b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044b6:	89a3      	ldrhlt	r3, [r4, #12]
 80044b8:	181b      	addge	r3, r3, r0
 80044ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044be:	bfac      	ite	ge
 80044c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044c2:	81a3      	strhlt	r3, [r4, #12]
 80044c4:	bd10      	pop	{r4, pc}

080044c6 <__swrite>:
 80044c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ca:	461f      	mov	r7, r3
 80044cc:	898b      	ldrh	r3, [r1, #12]
 80044ce:	05db      	lsls	r3, r3, #23
 80044d0:	4605      	mov	r5, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	4616      	mov	r6, r2
 80044d6:	d505      	bpl.n	80044e4 <__swrite+0x1e>
 80044d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044dc:	2302      	movs	r3, #2
 80044de:	2200      	movs	r2, #0
 80044e0:	f000 f94c 	bl	800477c <_lseek_r>
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	4632      	mov	r2, r6
 80044f2:	463b      	mov	r3, r7
 80044f4:	4628      	mov	r0, r5
 80044f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044fa:	f000 b973 	b.w	80047e4 <_write_r>

080044fe <__sseek>:
 80044fe:	b510      	push	{r4, lr}
 8004500:	460c      	mov	r4, r1
 8004502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004506:	f000 f939 	bl	800477c <_lseek_r>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	bf15      	itete	ne
 8004510:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004512:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004516:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800451a:	81a3      	strheq	r3, [r4, #12]
 800451c:	bf18      	it	ne
 800451e:	81a3      	strhne	r3, [r4, #12]
 8004520:	bd10      	pop	{r4, pc}

08004522 <__sclose>:
 8004522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004526:	f000 b8f7 	b.w	8004718 <_close_r>

0800452a <__swbuf_r>:
 800452a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452c:	460e      	mov	r6, r1
 800452e:	4614      	mov	r4, r2
 8004530:	4605      	mov	r5, r0
 8004532:	b118      	cbz	r0, 800453c <__swbuf_r+0x12>
 8004534:	6a03      	ldr	r3, [r0, #32]
 8004536:	b90b      	cbnz	r3, 800453c <__swbuf_r+0x12>
 8004538:	f7ff fab0 	bl	8003a9c <__sinit>
 800453c:	69a3      	ldr	r3, [r4, #24]
 800453e:	60a3      	str	r3, [r4, #8]
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	071a      	lsls	r2, r3, #28
 8004544:	d501      	bpl.n	800454a <__swbuf_r+0x20>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	b943      	cbnz	r3, 800455c <__swbuf_r+0x32>
 800454a:	4621      	mov	r1, r4
 800454c:	4628      	mov	r0, r5
 800454e:	f000 f82b 	bl	80045a8 <__swsetup_r>
 8004552:	b118      	cbz	r0, 800455c <__swbuf_r+0x32>
 8004554:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004558:	4638      	mov	r0, r7
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	6922      	ldr	r2, [r4, #16]
 8004560:	1a98      	subs	r0, r3, r2
 8004562:	6963      	ldr	r3, [r4, #20]
 8004564:	b2f6      	uxtb	r6, r6
 8004566:	4283      	cmp	r3, r0
 8004568:	4637      	mov	r7, r6
 800456a:	dc05      	bgt.n	8004578 <__swbuf_r+0x4e>
 800456c:	4621      	mov	r1, r4
 800456e:	4628      	mov	r0, r5
 8004570:	f7ff ff64 	bl	800443c <_fflush_r>
 8004574:	2800      	cmp	r0, #0
 8004576:	d1ed      	bne.n	8004554 <__swbuf_r+0x2a>
 8004578:	68a3      	ldr	r3, [r4, #8]
 800457a:	3b01      	subs	r3, #1
 800457c:	60a3      	str	r3, [r4, #8]
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	6022      	str	r2, [r4, #0]
 8004584:	701e      	strb	r6, [r3, #0]
 8004586:	6962      	ldr	r2, [r4, #20]
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	429a      	cmp	r2, r3
 800458c:	d004      	beq.n	8004598 <__swbuf_r+0x6e>
 800458e:	89a3      	ldrh	r3, [r4, #12]
 8004590:	07db      	lsls	r3, r3, #31
 8004592:	d5e1      	bpl.n	8004558 <__swbuf_r+0x2e>
 8004594:	2e0a      	cmp	r6, #10
 8004596:	d1df      	bne.n	8004558 <__swbuf_r+0x2e>
 8004598:	4621      	mov	r1, r4
 800459a:	4628      	mov	r0, r5
 800459c:	f7ff ff4e 	bl	800443c <_fflush_r>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d0d9      	beq.n	8004558 <__swbuf_r+0x2e>
 80045a4:	e7d6      	b.n	8004554 <__swbuf_r+0x2a>
	...

080045a8 <__swsetup_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	4b29      	ldr	r3, [pc, #164]	@ (8004650 <__swsetup_r+0xa8>)
 80045ac:	4605      	mov	r5, r0
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	460c      	mov	r4, r1
 80045b2:	b118      	cbz	r0, 80045bc <__swsetup_r+0x14>
 80045b4:	6a03      	ldr	r3, [r0, #32]
 80045b6:	b90b      	cbnz	r3, 80045bc <__swsetup_r+0x14>
 80045b8:	f7ff fa70 	bl	8003a9c <__sinit>
 80045bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045c0:	0719      	lsls	r1, r3, #28
 80045c2:	d422      	bmi.n	800460a <__swsetup_r+0x62>
 80045c4:	06da      	lsls	r2, r3, #27
 80045c6:	d407      	bmi.n	80045d8 <__swsetup_r+0x30>
 80045c8:	2209      	movs	r2, #9
 80045ca:	602a      	str	r2, [r5, #0]
 80045cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045d6:	e033      	b.n	8004640 <__swsetup_r+0x98>
 80045d8:	0758      	lsls	r0, r3, #29
 80045da:	d512      	bpl.n	8004602 <__swsetup_r+0x5a>
 80045dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045de:	b141      	cbz	r1, 80045f2 <__swsetup_r+0x4a>
 80045e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045e4:	4299      	cmp	r1, r3
 80045e6:	d002      	beq.n	80045ee <__swsetup_r+0x46>
 80045e8:	4628      	mov	r0, r5
 80045ea:	f000 f90d 	bl	8004808 <_free_r>
 80045ee:	2300      	movs	r3, #0
 80045f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045f8:	81a3      	strh	r3, [r4, #12]
 80045fa:	2300      	movs	r3, #0
 80045fc:	6063      	str	r3, [r4, #4]
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	f043 0308 	orr.w	r3, r3, #8
 8004608:	81a3      	strh	r3, [r4, #12]
 800460a:	6923      	ldr	r3, [r4, #16]
 800460c:	b94b      	cbnz	r3, 8004622 <__swsetup_r+0x7a>
 800460e:	89a3      	ldrh	r3, [r4, #12]
 8004610:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004618:	d003      	beq.n	8004622 <__swsetup_r+0x7a>
 800461a:	4621      	mov	r1, r4
 800461c:	4628      	mov	r0, r5
 800461e:	f000 f83f 	bl	80046a0 <__smakebuf_r>
 8004622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004626:	f013 0201 	ands.w	r2, r3, #1
 800462a:	d00a      	beq.n	8004642 <__swsetup_r+0x9a>
 800462c:	2200      	movs	r2, #0
 800462e:	60a2      	str	r2, [r4, #8]
 8004630:	6962      	ldr	r2, [r4, #20]
 8004632:	4252      	negs	r2, r2
 8004634:	61a2      	str	r2, [r4, #24]
 8004636:	6922      	ldr	r2, [r4, #16]
 8004638:	b942      	cbnz	r2, 800464c <__swsetup_r+0xa4>
 800463a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800463e:	d1c5      	bne.n	80045cc <__swsetup_r+0x24>
 8004640:	bd38      	pop	{r3, r4, r5, pc}
 8004642:	0799      	lsls	r1, r3, #30
 8004644:	bf58      	it	pl
 8004646:	6962      	ldrpl	r2, [r4, #20]
 8004648:	60a2      	str	r2, [r4, #8]
 800464a:	e7f4      	b.n	8004636 <__swsetup_r+0x8e>
 800464c:	2000      	movs	r0, #0
 800464e:	e7f7      	b.n	8004640 <__swsetup_r+0x98>
 8004650:	200001fc 	.word	0x200001fc

08004654 <__swhatbuf_r>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	460c      	mov	r4, r1
 8004658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800465c:	2900      	cmp	r1, #0
 800465e:	b096      	sub	sp, #88	@ 0x58
 8004660:	4615      	mov	r5, r2
 8004662:	461e      	mov	r6, r3
 8004664:	da0d      	bge.n	8004682 <__swhatbuf_r+0x2e>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800466c:	f04f 0100 	mov.w	r1, #0
 8004670:	bf14      	ite	ne
 8004672:	2340      	movne	r3, #64	@ 0x40
 8004674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004678:	2000      	movs	r0, #0
 800467a:	6031      	str	r1, [r6, #0]
 800467c:	602b      	str	r3, [r5, #0]
 800467e:	b016      	add	sp, #88	@ 0x58
 8004680:	bd70      	pop	{r4, r5, r6, pc}
 8004682:	466a      	mov	r2, sp
 8004684:	f000 f858 	bl	8004738 <_fstat_r>
 8004688:	2800      	cmp	r0, #0
 800468a:	dbec      	blt.n	8004666 <__swhatbuf_r+0x12>
 800468c:	9901      	ldr	r1, [sp, #4]
 800468e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004696:	4259      	negs	r1, r3
 8004698:	4159      	adcs	r1, r3
 800469a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800469e:	e7eb      	b.n	8004678 <__swhatbuf_r+0x24>

080046a0 <__smakebuf_r>:
 80046a0:	898b      	ldrh	r3, [r1, #12]
 80046a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046a4:	079d      	lsls	r5, r3, #30
 80046a6:	4606      	mov	r6, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	d507      	bpl.n	80046bc <__smakebuf_r+0x1c>
 80046ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	6123      	str	r3, [r4, #16]
 80046b4:	2301      	movs	r3, #1
 80046b6:	6163      	str	r3, [r4, #20]
 80046b8:	b003      	add	sp, #12
 80046ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046bc:	ab01      	add	r3, sp, #4
 80046be:	466a      	mov	r2, sp
 80046c0:	f7ff ffc8 	bl	8004654 <__swhatbuf_r>
 80046c4:	9f00      	ldr	r7, [sp, #0]
 80046c6:	4605      	mov	r5, r0
 80046c8:	4639      	mov	r1, r7
 80046ca:	4630      	mov	r0, r6
 80046cc:	f7ff fc24 	bl	8003f18 <_malloc_r>
 80046d0:	b948      	cbnz	r0, 80046e6 <__smakebuf_r+0x46>
 80046d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046d6:	059a      	lsls	r2, r3, #22
 80046d8:	d4ee      	bmi.n	80046b8 <__smakebuf_r+0x18>
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	f043 0302 	orr.w	r3, r3, #2
 80046e2:	81a3      	strh	r3, [r4, #12]
 80046e4:	e7e2      	b.n	80046ac <__smakebuf_r+0xc>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	6020      	str	r0, [r4, #0]
 80046ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	9b01      	ldr	r3, [sp, #4]
 80046f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046f6:	b15b      	cbz	r3, 8004710 <__smakebuf_r+0x70>
 80046f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046fc:	4630      	mov	r0, r6
 80046fe:	f000 f82d 	bl	800475c <_isatty_r>
 8004702:	b128      	cbz	r0, 8004710 <__smakebuf_r+0x70>
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	81a3      	strh	r3, [r4, #12]
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	431d      	orrs	r5, r3
 8004714:	81a5      	strh	r5, [r4, #12]
 8004716:	e7cf      	b.n	80046b8 <__smakebuf_r+0x18>

08004718 <_close_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4d06      	ldr	r5, [pc, #24]	@ (8004734 <_close_r+0x1c>)
 800471c:	2300      	movs	r3, #0
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	f7fc fd4c 	bl	80011c0 <_close>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d102      	bne.n	8004732 <_close_r+0x1a>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	b103      	cbz	r3, 8004732 <_close_r+0x1a>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	200004e8 	.word	0x200004e8

08004738 <_fstat_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4d07      	ldr	r5, [pc, #28]	@ (8004758 <_fstat_r+0x20>)
 800473c:	2300      	movs	r3, #0
 800473e:	4604      	mov	r4, r0
 8004740:	4608      	mov	r0, r1
 8004742:	4611      	mov	r1, r2
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	f7fc fd47 	bl	80011d8 <_fstat>
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	d102      	bne.n	8004754 <_fstat_r+0x1c>
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	b103      	cbz	r3, 8004754 <_fstat_r+0x1c>
 8004752:	6023      	str	r3, [r4, #0]
 8004754:	bd38      	pop	{r3, r4, r5, pc}
 8004756:	bf00      	nop
 8004758:	200004e8 	.word	0x200004e8

0800475c <_isatty_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d06      	ldr	r5, [pc, #24]	@ (8004778 <_isatty_r+0x1c>)
 8004760:	2300      	movs	r3, #0
 8004762:	4604      	mov	r4, r0
 8004764:	4608      	mov	r0, r1
 8004766:	602b      	str	r3, [r5, #0]
 8004768:	f7fc fd46 	bl	80011f8 <_isatty>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_isatty_r+0x1a>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_isatty_r+0x1a>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	200004e8 	.word	0x200004e8

0800477c <_lseek_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d07      	ldr	r5, [pc, #28]	@ (800479c <_lseek_r+0x20>)
 8004780:	4604      	mov	r4, r0
 8004782:	4608      	mov	r0, r1
 8004784:	4611      	mov	r1, r2
 8004786:	2200      	movs	r2, #0
 8004788:	602a      	str	r2, [r5, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	f7fc fd3f 	bl	800120e <_lseek>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_lseek_r+0x1e>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_lseek_r+0x1e>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	200004e8 	.word	0x200004e8

080047a0 <_read_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4d07      	ldr	r5, [pc, #28]	@ (80047c0 <_read_r+0x20>)
 80047a4:	4604      	mov	r4, r0
 80047a6:	4608      	mov	r0, r1
 80047a8:	4611      	mov	r1, r2
 80047aa:	2200      	movs	r2, #0
 80047ac:	602a      	str	r2, [r5, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	f7fc fccd 	bl	800114e <_read>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_read_r+0x1e>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_read_r+0x1e>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	200004e8 	.word	0x200004e8

080047c4 <_sbrk_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d06      	ldr	r5, [pc, #24]	@ (80047e0 <_sbrk_r+0x1c>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	f7fc fd2a 	bl	8001228 <_sbrk>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_sbrk_r+0x1a>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_sbrk_r+0x1a>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	200004e8 	.word	0x200004e8

080047e4 <_write_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d07      	ldr	r5, [pc, #28]	@ (8004804 <_write_r+0x20>)
 80047e8:	4604      	mov	r4, r0
 80047ea:	4608      	mov	r0, r1
 80047ec:	4611      	mov	r1, r2
 80047ee:	2200      	movs	r2, #0
 80047f0:	602a      	str	r2, [r5, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f7fc fcc8 	bl	8001188 <_write>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_write_r+0x1e>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_write_r+0x1e>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	200004e8 	.word	0x200004e8

08004808 <_free_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4605      	mov	r5, r0
 800480c:	2900      	cmp	r1, #0
 800480e:	d041      	beq.n	8004894 <_free_r+0x8c>
 8004810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004814:	1f0c      	subs	r4, r1, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	bfb8      	it	lt
 800481a:	18e4      	addlt	r4, r4, r3
 800481c:	f7ff fe36 	bl	800448c <__malloc_lock>
 8004820:	4a1d      	ldr	r2, [pc, #116]	@ (8004898 <_free_r+0x90>)
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	b933      	cbnz	r3, 8004834 <_free_r+0x2c>
 8004826:	6063      	str	r3, [r4, #4]
 8004828:	6014      	str	r4, [r2, #0]
 800482a:	4628      	mov	r0, r5
 800482c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004830:	f7ff be32 	b.w	8004498 <__malloc_unlock>
 8004834:	42a3      	cmp	r3, r4
 8004836:	d908      	bls.n	800484a <_free_r+0x42>
 8004838:	6820      	ldr	r0, [r4, #0]
 800483a:	1821      	adds	r1, r4, r0
 800483c:	428b      	cmp	r3, r1
 800483e:	bf01      	itttt	eq
 8004840:	6819      	ldreq	r1, [r3, #0]
 8004842:	685b      	ldreq	r3, [r3, #4]
 8004844:	1809      	addeq	r1, r1, r0
 8004846:	6021      	streq	r1, [r4, #0]
 8004848:	e7ed      	b.n	8004826 <_free_r+0x1e>
 800484a:	461a      	mov	r2, r3
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b10b      	cbz	r3, 8004854 <_free_r+0x4c>
 8004850:	42a3      	cmp	r3, r4
 8004852:	d9fa      	bls.n	800484a <_free_r+0x42>
 8004854:	6811      	ldr	r1, [r2, #0]
 8004856:	1850      	adds	r0, r2, r1
 8004858:	42a0      	cmp	r0, r4
 800485a:	d10b      	bne.n	8004874 <_free_r+0x6c>
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	4401      	add	r1, r0
 8004860:	1850      	adds	r0, r2, r1
 8004862:	4283      	cmp	r3, r0
 8004864:	6011      	str	r1, [r2, #0]
 8004866:	d1e0      	bne.n	800482a <_free_r+0x22>
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	6053      	str	r3, [r2, #4]
 800486e:	4408      	add	r0, r1
 8004870:	6010      	str	r0, [r2, #0]
 8004872:	e7da      	b.n	800482a <_free_r+0x22>
 8004874:	d902      	bls.n	800487c <_free_r+0x74>
 8004876:	230c      	movs	r3, #12
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	e7d6      	b.n	800482a <_free_r+0x22>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	1821      	adds	r1, r4, r0
 8004880:	428b      	cmp	r3, r1
 8004882:	bf04      	itt	eq
 8004884:	6819      	ldreq	r1, [r3, #0]
 8004886:	685b      	ldreq	r3, [r3, #4]
 8004888:	6063      	str	r3, [r4, #4]
 800488a:	bf04      	itt	eq
 800488c:	1809      	addeq	r1, r1, r0
 800488e:	6021      	streq	r1, [r4, #0]
 8004890:	6054      	str	r4, [r2, #4]
 8004892:	e7ca      	b.n	800482a <_free_r+0x22>
 8004894:	bd38      	pop	{r3, r4, r5, pc}
 8004896:	bf00      	nop
 8004898:	200004e4 	.word	0x200004e4

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	bf00      	nop
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
